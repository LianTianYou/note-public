{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1698134994716},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1698135067552},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1698135067552},{"_id":"public/2023/10/24/hello-world/index.html","hash":"2e14a14258781dd0d113cb19afd3b533b2cb9c86","modified":1698136635868},{"_id":"public/archives/index.html","hash":"22656d6b7af01fd13e2517671e4685b4df6320de","modified":1698162590607},{"_id":"public/archives/2023/index.html","hash":"429f940b981b3502489335bddaa7feae630e8dad","modified":1698162590607},{"_id":"public/archives/2023/10/index.html","hash":"14ca06ea7961790c20b94f769982fde3f9359e0e","modified":1698162590607},{"_id":"public/index.html","hash":"9b8bae7d74fd3ec07937e69095afb8d80aad206d","modified":1698162590607},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1698136635868},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1698136635868},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1698136635868},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1698136635868},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1698136635868},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1698136635868},{"_id":"source/_posts/java-document-comments-javadoc-s-detailed-explanationcsdn-blog-bdrh6.md","hash":"360bb8aa793b6f1f463719d24a0c4774ddb72041","modified":1698134982251},{"_id":"public/post/java-document-comments-javadoc-s-detailed-explanationcsdn-blog-bdrh6.html","hash":"3e00ea12d4775fea18bdad746611fb81e0c48135","modified":1698162590607},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1698137342192},{"_id":"themes/butterfly/README.md","hash":"20a91bea7f7ada8b8195d2abff106a7ce21bba20","modified":1698137342193},{"_id":"themes/butterfly/README_CN.md","hash":"1e48dee40add6648d6b25ccb6c0d6617c5e2b94c","modified":1698137342193},{"_id":"themes/butterfly/_config.yml","hash":"e3a55783dbe0c54e6ddbddd3b7b7e26363ed2b96","modified":1698137342194},{"_id":"themes/butterfly/package.json","hash":"f71110fe94145e952524fc28bba124e7fa736bfe","modified":1698137342242},{"_id":"themes/butterfly/plugins.yml","hash":"873462c7803cfa57c2000b8858f6d28ce8da3f1f","modified":1698137342243},{"_id":"themes/butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1698137342196},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1698137342196},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1698137342241},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1698137342241},{"_id":"themes/butterfly/languages/default.yml","hash":"90e9e2f36dc51aa77eb7804ae048b4876035b12d","modified":1698137342194},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1698137342241},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1698137342242},{"_id":"themes/butterfly/languages/en.yml","hash":"68127be0e6b44cfc5f31353d8b275c02939b3ff9","modified":1698137342195},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1698137342192},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"2dcc70a011b37890215ae0fd6d8f8c78aa8af6b0","modified":1698137342195},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"1392e7b8c678cdfb54f55523693e66abc7d80538","modified":1698137342195},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1698137342190},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1698137342192},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"92683cb785a29e5a73701b33dba73d3afac268c3","modified":1698137342190},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1698137342197},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"50eea5aa78cdeb6c72dd22f0aeabc407cc0f712e","modified":1698137342197},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1698137342191},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1698137342198},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"f3e40119df8d29f874691b1dfe67405b41491c54","modified":1698137342198},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"96df62e34661d8ca4a45267286127479e5178a79","modified":1698137342204},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1698137342208},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5ed2d7ef240c927fe1b7a7fb5bf9e55e2bfd55a5","modified":1698137342246},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"f448bf73103b88de4443e52d600e871cf3de3e32","modified":1698137342209},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9277fead4c29dbe93976f078adaa26e8f9253da3","modified":1698137342209},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1698137342244},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"0df22d7dbfa766a65cb6032a1f003348f4307cfe","modified":1698137342246},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1698137342243},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1698137342244},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"219cf538cabac9971428e6eab5b18f9aad93fda5","modified":1698137342245},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1698137342244},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1698137342250},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1698137342245},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"164d5f1c2d1b4cb5a813a6fc574016743a53c019","modified":1698137342250},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"5d08c3552f7d3c80a724ca628bff66321abe2e5a","modified":1698137342250},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ec77b3093f5de67e7032f40a5b12f1389f6f6ff","modified":1698137342250},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"b013dc0a3d57d2caa18b89263f23871da9ec456d","modified":1698137342251},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"c863d2732ce4bdc084f2d0db92f50f80328c1007","modified":1698137342251},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"289f85847c58f0b2b7d98a68e370a2896edb8949","modified":1698137342252},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1698137342252},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"35d54adc92e717cc32e13515122b025fd1a98ea2","modified":1698137342252},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"dc56e5182dd3813dc977c9bf8556dcc7615e467b","modified":1698137342253},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"7c448886f230adb4f4a0208c88fff809abcb5637","modified":1698137342253},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"e611074a5a7f489a8b04afac0a3f7f882ce26532","modified":1698137342253},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1698137342247},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"b12895e0765d596494e5526d121de0dd5a7c23d3","modified":1698137342247},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"cdd992c8577d583c237b6aac9f5077d8200879b2","modified":1698137342247},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"b55f71347d2ead097c7f98c0ec792b091433345c","modified":1698137342248},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"17c0095bc8d612a268cdcab000b1742dc4c6f811","modified":1698137342249},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c74d6a9b8f71e69447f7847a5f5e81555d68b140","modified":1698137342248},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1698137342249},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1698137342276},{"_id":"themes/butterfly/source/css/var.styl","hash":"950250f66faeb611a67540e0fa6cedbcf5a7a321","modified":1698137342276},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1698137342277},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1698137342277},{"_id":"themes/butterfly/source/js/main.js","hash":"1f3c7399312d2afcaf6e35215c2f750528e106bc","modified":1698137342279},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1698137342278},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"d776c670e4076ad6049dbb64cdee7a734b51d37f","modified":1698137342280},{"_id":"themes/butterfly/source/js/utils.js","hash":"7b871fe0c4456660cff4c7b9cc4ed089adac2caf","modified":1698137342281},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1698137342198},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"069edb4278ace09498f6eec16d2f393df1424783","modified":1698137342199},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1698137342200},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1698137342199},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1698137342200},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a7c929b90ae52b78b39b1728e3ab0e3db1cb7b9a","modified":1698137342200},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"1bef867c799ba158c5417272fb137539951aa120","modified":1698137342202},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1698137342201},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1698137342201},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1698137342202},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"962ee70a35e60a13c31eea47d16b9f98069fe417","modified":1698137342202},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"7a641b5dd45b970e1dafd1433eb32ea149e55cf2","modified":1698137342203},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"766baca6ddce49d1724a02312387b292ff2d0bdc","modified":1698137342204},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"e7b25a322ae861dca06d458d3f914220e92758cf","modified":1698137342203},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1698137342205},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1698137342206},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1698137342204},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"a6fde4835d6460ce7baf792fd5e1977fad73db25","modified":1698137342205},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"194a5f310dccecee3ae0b648e4e5318f6fbbddcd","modified":1698137342206},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1698137342207},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"0abad416b1974a17e5be7817931d5fe799180170","modified":1698137342208},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e37681bc9c169d4220f26ecda2b3d5c02b6b9a0f","modified":1698137342207},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"912df10a053db3135968e92b6fd1a707ee94c968","modified":1698137342208},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"12be059c536490af216a397e8f2a7abbf6d4610e","modified":1698137342207},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1698137342210},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1698137342225},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1698137342231},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1698137342232},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"9b734d99963f3e7f562597dcf60485ccbf6e961c","modified":1698137342232},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"dfb5e16a7e7106bb20b2ac2d0df1251d0fc79609","modified":1698137342235},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1698137342236},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1698137342236},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"ab037bf5794638bd30da4cf7cf106e5d03b5f696","modified":1698137342237},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1698137342238},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1698137342237},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1698137342237},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"8e22f53886a57a68286970d8af8b4c950fd4a1d7","modified":1698137342238},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"2084b8065e63dd045bdca3dc5992014133601e28","modified":1698137342238},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1698137342239},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1698137342239},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1698137342239},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1698137342240},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"8df529f71e25f1c0a00e533de7944ed3d1ba7bd8","modified":1698137342240},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1698137342240},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"e920dae9ce00177922468db49240f5aca0af4f64","modified":1698137342255},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"0421da07907b3d98df64239e073b23fbb3f04149","modified":1698137342255},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"aae70ddd126b2e40158e45036abecbfa33cbfbba","modified":1698137342259},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"41054740cfbd1357138785464f6859681ca58493","modified":1698137342255},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1698137342259},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1698137342260},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"5e27f7842af82ff7498d4b59787ce9ca90fa9e6f","modified":1698137342260},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"66a7a0e3c58ac23c81afe9fe18834b9db9c42698","modified":1698137342261},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1698137342258},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1698137342261},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1698137342262},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"15e117726f1a239edbd9fec8c0caac7ffd1ff9bf","modified":1698137342263},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1698137342263},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"dbc855795a881f8c805bf5c9c5c4d5d542a648ec","modified":1698137342266},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c0b11a1a5f52e3a6af4e312a8134c93eda18a7dd","modified":1698137342264},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"0322237e762db401d7b4aa33168d0b9334a9ec26","modified":1698137342264},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"ac51f68342e208b166ffc4f9ff0da304b9ef091e","modified":1698137342265},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"15ea7564b2e3bf46bc91fb6e49c94d057b37caaf","modified":1698137342265},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1698137342267},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1698137342268},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"a22fd15048d21452f0015d0765d295d730203308","modified":1698137342266},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1698137342268},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"0b23010154e19f37f0c4af0110f9f834d6d41a13","modified":1698137342271},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1698137342269},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"df7a51fcabbadab5aa31770e3202a47c9599bbb7","modified":1698137342269},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"37db99299af380e9111dce2a78a5049b301b13e0","modified":1698137342270},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"d6ab1b1893f4eefce353da0ed03bff6d20292195","modified":1698137342271},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1698137342270},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"a977cd8161ef4d6ddd5293e81403519076657430","modified":1698137342270},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1698137342275},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"3e9355b76f87e2ee90f652855282b37ab5ae0b3e","modified":1698137342272},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1698137342272},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1698137342273},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1698137342273},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1698137342273},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1698137342274},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1698137342274},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1698137342275},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"353b95f9a6c2c1e777d978118cb61f909ccbf89c","modified":1698137342275},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a7c2fe73cc05ad3525909b86ad0ede1a9f2d3b48","modified":1698137342279},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"ab3904451ae1d78903424b8b2ef815c8571e1749","modified":1698137342280},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"8f95aca305b56ccd7c8c7367b03d26db816ebd5f","modified":1698137342210},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"19b5cfa1f77781246e02967cefe149f19170e45f","modified":1698137342211},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"58f37823f6cd9a194fb50f7ca7c2233e49939034","modified":1698137342210},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1698137342211},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1698137342212},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4b98145d6584d586cabf033493282afc72ae816a","modified":1698137342212},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"7e233f872aea6fd6beccdc9efd86b1bf9ec9f12d","modified":1698137342213},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1698137342212},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1698137342214},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1698137342214},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"09d2ab2570b67e6f09244a898ccab5567cb82ace","modified":1698137342215},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"08a85e52fc800d3562df869e5e2613313e76fce6","modified":1698137342215},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"1157118db9f5d7c0c5a0fc7c346f6e934ca00d52","modified":1698137342216},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"0d960849d5b05d27ec87627b983ca35f2411b9e8","modified":1698137342216},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"799da8f3015e6fe440681b21644bcb3810a5518c","modified":1698137342216},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"6d40b521eec4136f6742c548a4445ed593470b1b","modified":1698137342217},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"eb8f2919ea9d52f6c829ffa8052ba2585d0b6b98","modified":1698137342218},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"364d1fd655baca9132038ef1e312abde2c0bc7de","modified":1698137342218},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"f78c9c20c86d58c7cf099f6f8d6097103d7d43e5","modified":1698137342219},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"11f5dca1432e59f22955aaf4ac3e9de6b286d887","modified":1698137342219},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"1eab7ca1cb16c6786f9c3ca0efef8cc15e444ab4","modified":1698137342220},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"09c2ef4bc6d005f96dfa48b1d9af1ec095c5266d","modified":1698137342222},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c86c8fc1a28514a02a1f6a25ca9ec05eb3955b7","modified":1698137342221},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1698137342221},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1698137342222},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"7f450664e6323a076ae59c393b0f22167cfa82e5","modified":1698137342222},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"0b44f6de0f5632b55298d506833f45dae46a6346","modified":1698137342223},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b65a42167df5fb07e2a63f312a58c321d3112a90","modified":1698137342223},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"4ed7c74087e81c6fcaf4fca7dced58b4e19f4cb1","modified":1698137342224},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"7e56b48ab49bd03606d781aaa06f1f1132639ff2","modified":1698137342224},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1698137342226},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1698137342226},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"bb944185f4bb9f9a9b9d70ee215f66ccd6d4c6cf","modified":1698137342227},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"c682e4d61017fb0dd2e837bfcc242371f1a13364","modified":1698137342227},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"cfcfaed3a52fa47fff4cc65a053a2f025fb3b7b6","modified":1698137342228},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"a6be932d1f64c6190f5d03b5b77fba09fa0fd6b8","modified":1698137342228},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1698137342229},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"4f8bd22c5c32d5430cbe08ab4e861b6f8b86f820","modified":1698137342228},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"4fb998a05e51ef2302775945883307ee3039a544","modified":1698137342230},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"edd4ebf76a79fb74cfae03a286fab90f74324dbd","modified":1698137342230},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"862c7775b5639e082fab8833d996f383561877cd","modified":1698137342231},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"90338ac4cd114d324fe1caaaeea8be9ca05d6a46","modified":1698137342233},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"ce4ab79c85df9f77395269eb01e9a023d7f96376","modified":1698137342230},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"52a06a2e039f44383085333cac69f3f4e7d0ad3a","modified":1698137342233},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1698137342234},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"420a86e73d0d748ac234fd00d06d9e433ca5e3f2","modified":1698137342234},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1698137342233},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"c16ee69b5ca8db016db0508d014ae0867c4ce929","modified":1698137342235},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1698137342235},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1698137342256},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1698137342257},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"7c9cc43e1d2577f7151039d58e603c30860fd281","modified":1698137342258},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1698137342256},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1698137342257},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1698137431985},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1698137431985},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1698137431985},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1698137431985},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1698137431985},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1698137431985},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1698137431985},{"_id":"public/css/index.css","hash":"d25f87bebbc7d2447530d70c1b5ce4d3de952272","modified":1698137431985},{"_id":"public/js/main.js","hash":"4b4f882a393cbf5b3dfc2b218608a09905f3e3db","modified":1698137431985},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1698137431985},{"_id":"source/_posts/C++笔记.md/2. 内存分配.md","hash":"22bc6a6527cb5d5adeb4015b160df474bcce5542","modified":1698162525983},{"_id":"source/_posts/C++笔记.md/3. 面向对象.md","hash":"65fd1e95155a194866cd01c4e6d3f326b4be56ed","modified":1698162535079},{"_id":"source/_posts/C++笔记.md/1. 基础语法.md","hash":"5405a5625172e58de0f97af600dd1b185ff9cb51","modified":1698153904000},{"_id":"source/_posts/C++笔记.md/4. 容器.md","hash":"a9056e42dd550f45d689954da9150b16e3b092a2","modified":1698162551448},{"_id":"source/_posts/C++笔记.md/5. 模板.md","hash":"fb3e0f4ddf90fdcc2c1f1d0c0dedde874473009f","modified":1698162565524},{"_id":"source/_posts/C++笔记.md/1. 基础语法/1.1. 基本语法.md","hash":"343ca1c76527cd483edc9064beba3c204d5325f4","modified":1698153904000},{"_id":"source/_posts/C++笔记.md/1. 基础语法/1.3. 指针和引用.md","hash":"19252f2df9b657d3b820b661e179330127821061","modified":1698153904000},{"_id":"source/_posts/C++笔记.md/正则表达式.md","hash":"feff8be54bfae20bbff994a4fe0ec35a22ec916d","modified":1698162575592},{"_id":"source/_posts/C++笔记.md/1. 基础语法/1.4. 文件.md","hash":"7581f0d4bc71f247bb8cf7e8b9207ec99cd26d63","modified":1698153904000},{"_id":"source/_posts/C++笔记.md/1. 基础语法/1.2. 字符串.md","hash":"7adc0ec14a91d31ec23dc1b90300618d3dba6155","modified":1698153904000},{"_id":"public/2023/10/24/C++笔记.md/1. 基础语法/index.html","hash":"c88b249df2fcc1b84597c2cb0b8748450b9b2d18","modified":1698162590607},{"_id":"public/2023/10/24/C++笔记.md/正则表达式/index.html","hash":"284c04d0bddc8c7c8f51c7f88213613a1486e3be","modified":1698162590607},{"_id":"public/2023/10/24/C++笔记.md/5. 模板/index.html","hash":"dccb3a2c0b9edcdda077e9ea8cfc64d6f8fd27c8","modified":1698162590607},{"_id":"public/2023/10/24/C++笔记.md/4. 容器/index.html","hash":"d7bd401e21eee29ad1513ef3fd6200a03afdc3dc","modified":1698162590607},{"_id":"public/2023/10/24/C++笔记.md/3. 面向对象/index.html","hash":"c22ac60f50c682a110e1fae5919247b23cb1c596","modified":1698162590607},{"_id":"public/2023/10/24/C++笔记.md/2. 内存分配/index.html","hash":"c72b5872c1688cd773aa014dcb00aa7d714f4afc","modified":1698162590607},{"_id":"public/2023/10/24/C++笔记.md/1. 基础语法/1.4. 文件/index.html","hash":"5ff494addf11f1216ce55375d1f5bfce43f37a5a","modified":1698162590607},{"_id":"public/2023/10/24/C++笔记.md/1. 基础语法/1.3. 指针和引用/index.html","hash":"571963d5d6b83555ef035e789ce41a399b4356cf","modified":1698162590607},{"_id":"public/2023/10/24/C++笔记.md/1. 基础语法/1.2. 字符串/index.html","hash":"342a2bf12263e3ae16995a7bc213624ae0ca4d15","modified":1698162590607},{"_id":"public/2023/10/24/C++笔记.md/1. 基础语法/1.1. 基本语法/index.html","hash":"2fce9f21d2a6c31e3afc790655217a90c042f486","modified":1698162590607},{"_id":"public/archives/page/2/index.html","hash":"5dbf4731318dcc1fccb0c2d6c101202066db4b2e","modified":1698162590607},{"_id":"public/archives/2023/10/page/2/index.html","hash":"12ed4ca118d426d2151979fc1269f83a28128b1b","modified":1698162590607},{"_id":"public/archives/2023/page/2/index.html","hash":"4a574af6492da6a7974cd31096e80d7489eb6a8c","modified":1698162590607},{"_id":"public/page/2/index.html","hash":"059b3cd12b7ab1e4ff7dad22579cf14d310c1a94","modified":1698162590607}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Java文档注释用法+JavaDoc的使用详解-CSDN博客","date":"2023-10-24T06:03:02.000Z","updated":"2023-10-24T07:57:37.000Z","comments":1,"toc":true,"_content":"\n# Java文档注释用法+JavaDoc的使用详解-CSDN博客\n\n---\n\n* [https://blog.csdn.net/lsy0903/article/details/89893934](https://blog.csdn.net/lsy0903/article/details/89893934)\n* Java文档注释+JavaDoc的使用详解简介文档注释负责描述类、接口、方法、构造器、成员属性。可以被JDK提供的工具 javadoc 所解析，自动生成一套以网页文件形式体现该程序说明文档的注释。注意：文档注释必须写在类、接口、方法、构造器、成员字段前面，写在其他位置无效。JavaDoc 官方说明How to Write Doc Comments for the Javadoc Tool..._javadoc\n* 2023-10-24 14:03:02\n\n‍\n\n---\n\n## Java文档注释+JavaDoc的使用详解\n\n### 简介\n\n文档注释负责描述类、接口、方法、构造器、成员属性。可以被JDK提供的工具 javadoc 所解析，自动生成一套以网页文件形式体现该程序说明文档的注释。\n\n注意：文档注释必须写在类、接口、方法、构造器、成员字段前面，写在其他位置无效。\n\n[JavaDoc 官方说明](https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html)  \n[How to Write Doc Comments for the Javadoc Tool](https://www.oracle.com/technetwork/java/javase/documentation/index-137868.html)\n\n### 写在类上面的JavaDoc\n\n写在类上的文档标注一般分为三段：\n\n* 第一段：概要描述，通常用一句或者一段话简要描述该类的作用，以英文句号作为结束\n* 第二段：详细描述，通常用一段或者多段话来详细描述该类的作用，一般每段话都以英文句号作为结束\n* 第三段：文档标注，用于标注作者、创建时间、参阅类等信息\n\n#### 第一段：概要描述\n\n单行示例：\n\n```java\npackage org.springframework.jdbc.core;\n/**\n * Simple adapter for {@link PreparedStatementSetter} that applies a given array of arguments.\n *\n */\npublic class ArgumentPreparedStatementSetter implements PreparedStatementSetter, ParameterDisposer { \n}\n```\n\n多行示例：\n\n```java\npackage java.lang;\n/**\n * The {@code Long} class wraps a value of the primitive type {@code\n * long} in an object. An object of type {@code Long} contains a\n * single field whose type is {@code long}.\n *\n * <p> In addition, this class provides several methods for converting\n * a {@code long} to a {@code String} and a {@code String} to a {@code\n * long}, as well as other constants and methods useful when dealing\n * with a {@code long}.\n *\n * <p>Implementation note: The implementations of the \"bit twiddling\"\n * methods (such as {@link #highestOneBit(long) highestOneBit} and\n * {@link #numberOfTrailingZeros(long) numberOfTrailingZeros}) are\n * based on material from Henry S. Warren, Jr.'s <i>Hacker's\n * Delight</i>, (Addison Wesley, 2002).\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Josh Bloch\n * @author  Joseph D. Darcy\n * @since   JDK1.0\n */\npublic final class Long extends Number implements Comparable<Long> { \n}\n```\n\n在注释中出现以@开头的东东被称之为Javadoc文档标记，是JDK定义好的如@author、@version、@since、@see、@link、@code、@param、@return、@exception、@throws等。\n\n##### @link： {@link 包名.类名#方法名(参数类型)} 用于快速链接到相关代码\n\n@link的使用语法`{@link 包名.类名#方法名(参数类型)}`​，其中当包名在当前类中已经导入了包名可以省略，可以只是一个​**类名**​，也可以是仅仅是一个​**方法名**​，也可以是​**类名.方法名**​，使用此文档标记的类或者方法，可用按住**Ctrl键+鼠标单击**快速跳到相应的类或者方法上，解析成html其实就是使用`<code>包名.类名#方法名(参数类型)</code>`​\n\n@link示例\n\n```java\n// 完全限定的类名\n{ @link java.nio.charset.CharsetEncoder}\n\n// 省略包名\n{ @link String} and { @link StringBuilder}\n\n// 省略类名，表示指向当前的某个方法\n{ @link #equals(Object)}\n\n// 包名.类名#方法名(参数类型)\n{ @link java.lang.Long#toString(long)} \n```\n\n##### @code： {@code text} 将文本标记为code\n\n@code的使用语法`{@code text}`​ 会被解析成`<code>text</code>`​  \n将文本标记为代码样式的文本，在code内部可以使用 < 、> 等不会被解释成html标签, code标签有自己的样式\n\n一般在Javadoc中只要涉及到类名或者方法名，都需要使用@code进行标记。\n\n#### 第二段：详细描述\n\n详细描述一般用一段或多段来详细描述类的作用，详细描述中可以使用html标签，如`<p>`​、`<pre>`​、`<a>`​、`<ul>`​、`<i>`​ 等标签， 通常详细描述都以段落p标签开始。  \n详细描述和概要描述中间通常有一个空行来分割， 实例如下\n\n```java\npackage org.springframework.util;\n/**\n * Miscellaneous {@link String} utility methods.\n *\n * <p>Mainly for internal use within the framework; consider\n * <a href=\"http://commons.apache.org/proper/commons-lang/\">Apache's Commons Lang</a>\n * for a more comprehensive suite of {@code String} utilities.\n *\n * <p>This class delivers some simple functionality that should really be\n * provided by the core Java {@link String} and {@link StringBuilder}\n * classes. It also provides easy-to-use methods to convert between\n * delimited strings, such as CSV strings, and collections and arrays.\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Keith Donald\n * @author Rob Harrop\n * @author Rick Evans\n * @author Arjen Poutsma\n * @author Sam Brannen\n * @author Brian Clozel\n * @since 16 April 2001\n */\npublic abstract class StringUtils { }\n```\n\n一般段落都用p标签来标记，凡涉及到类名和方法名都用`@code`​标记，凡涉及到组织的，一般用a标签提供出来链接地址。\n\n##### @param\n\n一般类中支持泛型时会通过`@param`​来解释泛型的类型\n\n```java\npackage java.util;\n/**\n * @param <E> the type of elements in this list\n *\n */\npublic interface List<E> extends Collection<E> { }\n```\n\n##### @author\n\n详细描述后面一般使用`@author`​来标记作者，如果一个文件有多个作者来维护就标记多个`@author`​，`@author`​后面可以跟作者姓名(也可以附带邮箱地址)、组织名称(也可以附带组织官网地址)\n\n```java\n// 纯文本作者\n@author Rod Johnson\n\n// 纯文本作者，邮件\n@author Igor Hersht, igorh@ca.ibm.com\n\n// 超链接邮件 纯文本作者\n@author <a href=\"mailto:ovidiu@cup.hp.com\">Ovidiu Predescu</a>\n\n// 纯文本邮件\n@author shane_curcuru@us.ibm.com\n\n// 纯文本 组织\n@author Apache Software Foundation\n\n// 超链接组织地址 纯文本组织\n@author <a href=\"https://jakarta.apache.org/turbine\"> Apache Jakarta Turbine</a>\n```\n\n##### @see 另请参阅\n\n​`@see`​ 一般用于标记该类相关联的类,@see即可以用在类上，也可以用在方法上。\n\n```java\n/**\n * @see IntStream\n * @see LongStream\n * @see DoubleStream\n * @see <a href=\"package-summary.html\">java.util.stream</a>\n * /\npublic interface Stream<T> extends BaseStream<T, Stream<T>> {}\n```\n\n##### @since 从以下版本开始\n\n​`@since`​ 一般用于标记文件创建时项目当时对应的版本，一般后面跟版本号，也可以跟是一个时间，表示文件当前创建的时间\n\n```java\npackage java.util.stream;\n\n/**\n* @since 1.8\n*/\npublic interface Stream<T> extends BaseStream<T, Stream<T>> { }\n```\n\n```java\npackage org.springframework.util;\n\n/**\n* @since 16 April 2001\n*/\npublic abstract class StringUtils { }\n```\n\n##### @version 版本\n\n​`@version`​用于标记当前版本，默认为1.0\n\n```java\n package com.sun.org.apache.xml.internal.resolver;\n /**\n * @version 1.0\n */\npublic class CatalogManager { }\n```\n\n### 写在方法上的JavaDoc\n\n写在方法上的文档标注一般分为三段：\n\n* 第一段：概要描述，通常用一句或者一段话简要描述该方法的作用，以英文句号作为结束\n* 第二段：详细描述，通常用一段或者多段话来详细描述该方法的作用，一般每段话都以英文句号作为结束\n* 第三段：文档标注，用于标注参数、返回值、异常、参阅等\n\n方法详细描述上经常使用html标签，通常都以p标签开始，而且p标签通常都是单标签，不使用结束标签，其中使用最多的就是p标签和pre标签,ul标签, i标签。\n\npre标签可定义预格式化的文本。被包围在pre标签中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体，pre标签的一个常见应用就是用来表示计算机的源代码。\n\n一般p经常结合pre使用，或者pre结合@code共同使用(推荐@code方式)  \n一般经常使用pre来举例如何使用方法\n\n**注意：pre标签中如果有小于号、大于号、例如泛型 在生产javadoc时会报错**\n\np结合pre使用\n\n```java\n/**\n * Check that the given {@code CharSequence} is neither {@code null} nor\n * of length 0.\n * <p>Note: this method returns {@code true} for a {@code CharSequence}\n * that purely consists of whitespace.\n * <p><pre class=\"code\">\n * StringUtils.hasLength(null) = false\n * StringUtils.hasLength(\"\") = false\n * StringUtils.hasLength(\" \") = true\n * StringUtils.hasLength(\"Hello\") = true\n * </pre>\n * @param str the {@code CharSequence} to check (may be {@code null})\n * @return {@code true} if the {@code CharSequence} is not {@code null} and has length\n * @see #hasText(String)\n */\npublic static boolean hasLength(@Nullable CharSequence str) { \n\treturn (str != null && str.length() > 0);\n}\n```\n\npre结合@code使用\n\n```java\n<pre>{ @code\n     Person[] men = people.stream()\n                        .filter(p -> p.getGender() == MALE)\n                        .toArray(Person[]::new);\n}</pre>\n```\n\n##### @param\n\n​`@param`​ 后面跟参数名，再跟参数描述\n\n```java\n/**\n * @param str the {@code CharSequence} to check (may be {@code null})\n */\npublic static boolean hasText(@Nullable CharSequence str) { \n\treturn (str != null && str.length() > 0 && containsText(str));\n}\n```\n\n##### @return\n\n​`@return`​ 跟返回值的描述\n\n```java\n/**\n * @return {@code true} if the {@code CharSequence} is not {@code null},\n * its length is greater than 0, and it does not contain whitespace only\n */\npublic static boolean hasText(@Nullable CharSequence str) { \n\treturn (str != null && str.length() > 0 && containsText(str));\n}\n```\n\n##### @[throws](https://so.csdn.net/so/search?q=throws&spm=1001.2101.3001.7020)\n\n​`@throws`​ 跟异常类型 异常描述 , 用于描述方法内部可能抛出的异常\n\n```java\n/**\n * @throws IllegalArgumentException when the given source contains invalid encoded sequences\n */\npublic static String uriDecode(String source, Charset charset) { }\n```\n\n##### @exception\n\n​`@exception`​ 用于描述方法签名throws对应的异常\n\n```java\npackage com.sun.jmx.remote.security;\n/**\n * @exception LoginException if the logout fails.\n */\npublic boolean logout() throws LoginException { }\n```\n\n##### @deprecated\n\n​`@deprecated`​ 用于标注一个类或成员已过期,通常配合`{@link}`​使用\n\n```java\n/**\n* @deprecated as of 5.0.4, in favor of {@link Locale#toLanguageTag()}\n*/\n@Deprecated\npublic static String toLanguageTag(Locale locale) { \nreturn locale.getLanguage() + (hasText(locale.getCountry()) ? \"-\" + locale.getCountry() : \"\");\n}\n```\n\n##### @see\n\n​`@see`​ 既可以用来类上也可以用在方法上，表示可以参考的类或者方法\n\n```java\n/**\n* @see java.net.URLDecoder#decode(String, String)\n*/\npublic static String uriDecode(String source, Charset charset) { }\n```\n\n##### @value\n\n​`{@value}`​ 用于标注在常量上用于表示常量的值\n\n```java\n/** 默认数量 {@value} */\nprivate static final Integer QUANTITY = 1;\n```\n\n##### @inheritDoc\n\n​`@inheritDoc`​ 用于注解在重写方法或者子类上，用于继承父类中的Javadoc\n\n* 基类的文档注释被继承到了子类\n* 子类可以再加入自己的注释（特殊化扩展）\n* @return @param @throws 也会被继承\n\n### 示例\n\nspring-core中的StringUtils 示例\n\n```java\npackage org.springframework.util;\n/**\n * Miscellaneous {@link String} utility methods.\n *\n * <p>Mainly for internal use within the framework; consider\n * <a href=\"http://commons.apache.org/proper/commons-lang/\">Apache's Commons Lang</a>\n * for a more comprehensive suite of {@code String} utilities.\n *\n * <p>This class delivers some simple functionality that should really be\n * provided by the core Java {@link String} and {@link StringBuilder}\n * classes. It also provides easy-to-use methods to convert between\n * delimited strings, such as CSV strings, and collections and arrays.\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Keith Donald\n * @author Rob Harrop\n * @author Rick Evans\n * @author Arjen Poutsma\n * @author Sam Brannen\n * @author Brian Clozel\n * @since 16 April 2001\n */\npublic abstract class StringUtils { \n\t/**\n\t * Check that the given {@code CharSequence} is neither {@code null} nor\n\t * of length 0.\n\t * <p>Note: this method returns {@code true} for a {@code CharSequence}\n\t * that purely consists of whitespace.\n\t * <p><pre class=\"code\">\n\t * StringUtils.hasLength(null) = false\n\t * StringUtils.hasLength(\"\") = false\n\t * StringUtils.hasLength(\" \") = true\n\t * StringUtils.hasLength(\"Hello\") = true\n\t * </pre>\n\t * @param str the {@code CharSequence} to check (may be {@code null})\n\t * @return {@code true} if the {@code CharSequence} is not {@code null} and has length\n\t * @see #hasText(String)\n\t */\n\tpublic static boolean hasLength(@Nullable CharSequence str) { \n\t\treturn (str != null && str.length() > 0);\n\t}\n}\n```\n\n亲自实践\n\n```java\npackage com.example.javadocdemo;\n\nimport java.math.BigDecimal;\nimport java.util.Objects;\n\n/**\n * 类 {@code OrderService} 订单服务层.\n *\n * <p> 主要包括 创建订单、取消订单、查询订单等功能更\n *\n * @see Order\n * @author <a href=\"mailto:lerryli@foxmail.com\">Lerry Li</a>\n * @since 2019/05/06\n */\npublic class OrderService { \n\n    /** 默认数量 {@value} */\n    private static final Integer QUANTITY = 1;\n\n    /**\n     * 创建订单.\n     *\n     * <p> 创建订单需要传用户id和商品列表(商品id和商品数量).\n     *\n     * <pre>{@code\n     *  演示如何使用该方法\n     *  List<Goods> items = new ArrayList<>();\n     *  Goods goods = new Goods(1L, BigDecimal.ONE);\n     *  Goods goods2 = new Goods(2L, BigDecimal.TEN);\n     *  items.add(goods);\n     *  items.add(goods2);\n     *\n     *  Order order1 = new Order();\n     *  order.setUserId(\"1\");\n     *  order.setItems(items);\n     *  OrderService#createOrder(order);\n     * }\n     * </pre>\n     *\n     * @param order 订单信息\n     * @throws NullPointerException 参数信息为空\n     * @exception IllegalArgumentException  数量不合法\n     * @return 是否创建成功\n     * @version 1.0\n     * @see Order\n     */\n    public boolean createOrder(Order order) throws IllegalArgumentException{ \n        Objects.requireNonNull(order);\n\n        List<Goods> items = order.getItems();\n        items.forEach(goods -> { \n            BigDecimal quantity = goods.getQuantity();\n            if (quantity <span style=\"font-weight: bold;\" class=\"mark\"> null || BigDecimal.ZERO.compareTo(quantity) </span> 0) { \n                throw new IllegalArgumentException();\n            }\n        });\n\n        System.out.println(\"create order...\");\n\n        return true;\n    }\n}\n```\n\n### 生成JavaDoc\n\n通过IDEA生成Javadoc： Tools –> Generate JavaDoc  \n注意要配置编码，如果不配置则生成的JavaDoc会乱码，还需要配置Output directory  \n​![Generate JavaDoc](http://127.0.0.1:6806/assets/20190506232720436-20231024140302-7qr2y3q.png)  \n​![参数配置](http://127.0.0.1:6806/assets/20190506234058735-20231024140302-29lw0lj.png)  \n这里有几点要特别注意一下：\n\n1. IDEA 的 JavaDoc 生成功能在菜单 Tools->Generate JavaDoc 项里面。\n2. 点击上述菜单项后，会出现生成 JavaDoc 的对话框，一般的选项都很直观，不必细说。但是要注意生成 JavaDoc 的源代码对象的选择，一般以模块（Module）为主，必要时可以单独选择必要的 Java 源代码文件，不推荐以 Project 为 JavaDoc 生成的源范围。\n3. 里面有一个 Locale 可选填项，表示的是需要生成的 JavaDoc 以何种语言版本展示，根据 javadoc.exe 的帮助说明，这其实对应的就是 javadoc.exe 的 -locale 参数，如果不填，默认可能是英文或者是当前操作系统的语言，既然是国人，建议在此填写 zh_CN，这样生成的 JavaDoc 就是中文版本的，当然指的是 JavaDoc 的框架中各种通用的固定显示区域都是中文的。你自己编写的注释转换的内容还是根据你注释的内容来。\n4. 还有一个“Other command line arguments:”可选填项，非常重要，是填写直接向 javadoc.exe 传递的参数内容。因为有一些重要的设置，只能通过直接参数形式向 javadoc.exe 传递。这里必须要填写如下参数：\n\n```\n-encoding UTF-8 -charset UTF-8 -windowtitle \"JavaDoc使用详解\" -link https://docs.oracle.com/javase/8/docs/api\n```\n\n5. 第一个参数 -encoding UTF-8 表示你的源代码（含有符合 JavaDoc 标准的注释）是基于 UTF-8 编码的，以免处理过程中出现中文等非英语字符乱码；第二个参数 -charset UTF-8 表示在处理并生成 JavaDoc 超文本时使用的字符集也是以 UTF-8 为编码，目前所有浏览器都支持 UTF-8，这样最具有通用性，支持中文非常好；第三个参数 -windowtitle 表示生成的 JavaDoc 超文本在浏览器中打开时，浏览器窗口标题栏显示的文字内容；第四个参数 -link 很重要，它表示你生成的 JavaDoc 中涉及到很多对其他外部 Java 类的引用，是使用全限定名称还是带有超链接的短名称，举个例子，我创建了一个方法 public void func(String arg)，这个方法在生成 JavaDoc 时如果不指定 -link 参数，则 JavaDoc 中对该方法的表述就会自动变为 public void func(java.lang.String arg)，因为 String 这个类对我自己实现的类来讲就是外部引用的类，虽然它是 Java 标准库的类。如果指定了 -link [https://docs.oracle.com/javase/8/docs/api/](https://docs.oracle.com/javase/8/docs/api/) 参数，则 javadoc.exe 在生成 JavaDoc 时，会使用 String 这样的短名称而非全限定名称 java.lang.String，同时自动为 String 短名称生成一个超链接，指向官方 JavaSE 标准文档 [https://docs.oracle.com/javase/8/docs/api/](https://docs.oracle.com/javase/8/docs/api/) 中对 String 类的详细文档地址。-link 实质上是告诉 javadoc.exe 根据提供的外部引用类的 JavaDoc 地址去找一个叫 package-list 的文本文件，在这个文本文件中包含了所有外部引用类的全限定名称，因此生成的新 JavaDoc 不必使用外部引用类的全限定名，只需要使用短名称，同时可以自动创建指向其外部引用 JavaDoc 中的详细文档超链接。每个 JavaDoc 都会在根目录下有一个 package-list 文件，包括我们自己生成的 JavaDoc。\n\n### 查看成果\n\n配置完毕后点击`OK`​按钮,console看到如下日志输出则说明JavaDoc生成成功  \n​![生成JavaDoc](http://127.0.0.1:6806/assets/20190506235158770-20231024140302-5ci4h2j.png)  \nJavaDoc 生成完毕，即可在其根目录下找到 index.html 文件，打开它就可以看到我们自己的标准 JavaDoc API 文档啦。  \n​![生成后的JavaDoc](http://127.0.0.1:6806/assets/201905062353345-20231024140302-m70gtbv.png)  \n​![类结构](http://127.0.0.1:6806/assets/20190506235431735-20231024140302-5cmeeml.png)  \n​![方法资料](http://127.0.0.1:6806/assets/20190506235511278-20231024140302-29qmwak.png)​\n\n---\n\n​![](http://127.0.0.1:6806/assets/20180623202835803-20231024140302-s4rfuzd.png)​\n","source":"_posts/java-document-comments-javadoc-s-detailed-explanationcsdn-blog-bdrh6.md","raw":"---\ntitle: Java文档注释用法+JavaDoc的使用详解-CSDN博客\ndate: '2023-10-24 14:03:02'\nupdated: '2023-10-24 15:57:37'\npermalink: >-\n  /post/java-document-comments-javadoc-s-detailed-explanationcsdn-blog-bdrh6.html\ncomments: true\ntoc: true\n---\n\n# Java文档注释用法+JavaDoc的使用详解-CSDN博客\n\n---\n\n* [https://blog.csdn.net/lsy0903/article/details/89893934](https://blog.csdn.net/lsy0903/article/details/89893934)\n* Java文档注释+JavaDoc的使用详解简介文档注释负责描述类、接口、方法、构造器、成员属性。可以被JDK提供的工具 javadoc 所解析，自动生成一套以网页文件形式体现该程序说明文档的注释。注意：文档注释必须写在类、接口、方法、构造器、成员字段前面，写在其他位置无效。JavaDoc 官方说明How to Write Doc Comments for the Javadoc Tool..._javadoc\n* 2023-10-24 14:03:02\n\n‍\n\n---\n\n## Java文档注释+JavaDoc的使用详解\n\n### 简介\n\n文档注释负责描述类、接口、方法、构造器、成员属性。可以被JDK提供的工具 javadoc 所解析，自动生成一套以网页文件形式体现该程序说明文档的注释。\n\n注意：文档注释必须写在类、接口、方法、构造器、成员字段前面，写在其他位置无效。\n\n[JavaDoc 官方说明](https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html)  \n[How to Write Doc Comments for the Javadoc Tool](https://www.oracle.com/technetwork/java/javase/documentation/index-137868.html)\n\n### 写在类上面的JavaDoc\n\n写在类上的文档标注一般分为三段：\n\n* 第一段：概要描述，通常用一句或者一段话简要描述该类的作用，以英文句号作为结束\n* 第二段：详细描述，通常用一段或者多段话来详细描述该类的作用，一般每段话都以英文句号作为结束\n* 第三段：文档标注，用于标注作者、创建时间、参阅类等信息\n\n#### 第一段：概要描述\n\n单行示例：\n\n```java\npackage org.springframework.jdbc.core;\n/**\n * Simple adapter for {@link PreparedStatementSetter} that applies a given array of arguments.\n *\n */\npublic class ArgumentPreparedStatementSetter implements PreparedStatementSetter, ParameterDisposer { \n}\n```\n\n多行示例：\n\n```java\npackage java.lang;\n/**\n * The {@code Long} class wraps a value of the primitive type {@code\n * long} in an object. An object of type {@code Long} contains a\n * single field whose type is {@code long}.\n *\n * <p> In addition, this class provides several methods for converting\n * a {@code long} to a {@code String} and a {@code String} to a {@code\n * long}, as well as other constants and methods useful when dealing\n * with a {@code long}.\n *\n * <p>Implementation note: The implementations of the \"bit twiddling\"\n * methods (such as {@link #highestOneBit(long) highestOneBit} and\n * {@link #numberOfTrailingZeros(long) numberOfTrailingZeros}) are\n * based on material from Henry S. Warren, Jr.'s <i>Hacker's\n * Delight</i>, (Addison Wesley, 2002).\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Josh Bloch\n * @author  Joseph D. Darcy\n * @since   JDK1.0\n */\npublic final class Long extends Number implements Comparable<Long> { \n}\n```\n\n在注释中出现以@开头的东东被称之为Javadoc文档标记，是JDK定义好的如@author、@version、@since、@see、@link、@code、@param、@return、@exception、@throws等。\n\n##### @link： {@link 包名.类名#方法名(参数类型)} 用于快速链接到相关代码\n\n@link的使用语法`{@link 包名.类名#方法名(参数类型)}`​，其中当包名在当前类中已经导入了包名可以省略，可以只是一个​**类名**​，也可以是仅仅是一个​**方法名**​，也可以是​**类名.方法名**​，使用此文档标记的类或者方法，可用按住**Ctrl键+鼠标单击**快速跳到相应的类或者方法上，解析成html其实就是使用`<code>包名.类名#方法名(参数类型)</code>`​\n\n@link示例\n\n```java\n// 完全限定的类名\n{ @link java.nio.charset.CharsetEncoder}\n\n// 省略包名\n{ @link String} and { @link StringBuilder}\n\n// 省略类名，表示指向当前的某个方法\n{ @link #equals(Object)}\n\n// 包名.类名#方法名(参数类型)\n{ @link java.lang.Long#toString(long)} \n```\n\n##### @code： {@code text} 将文本标记为code\n\n@code的使用语法`{@code text}`​ 会被解析成`<code>text</code>`​  \n将文本标记为代码样式的文本，在code内部可以使用 < 、> 等不会被解释成html标签, code标签有自己的样式\n\n一般在Javadoc中只要涉及到类名或者方法名，都需要使用@code进行标记。\n\n#### 第二段：详细描述\n\n详细描述一般用一段或多段来详细描述类的作用，详细描述中可以使用html标签，如`<p>`​、`<pre>`​、`<a>`​、`<ul>`​、`<i>`​ 等标签， 通常详细描述都以段落p标签开始。  \n详细描述和概要描述中间通常有一个空行来分割， 实例如下\n\n```java\npackage org.springframework.util;\n/**\n * Miscellaneous {@link String} utility methods.\n *\n * <p>Mainly for internal use within the framework; consider\n * <a href=\"http://commons.apache.org/proper/commons-lang/\">Apache's Commons Lang</a>\n * for a more comprehensive suite of {@code String} utilities.\n *\n * <p>This class delivers some simple functionality that should really be\n * provided by the core Java {@link String} and {@link StringBuilder}\n * classes. It also provides easy-to-use methods to convert between\n * delimited strings, such as CSV strings, and collections and arrays.\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Keith Donald\n * @author Rob Harrop\n * @author Rick Evans\n * @author Arjen Poutsma\n * @author Sam Brannen\n * @author Brian Clozel\n * @since 16 April 2001\n */\npublic abstract class StringUtils { }\n```\n\n一般段落都用p标签来标记，凡涉及到类名和方法名都用`@code`​标记，凡涉及到组织的，一般用a标签提供出来链接地址。\n\n##### @param\n\n一般类中支持泛型时会通过`@param`​来解释泛型的类型\n\n```java\npackage java.util;\n/**\n * @param <E> the type of elements in this list\n *\n */\npublic interface List<E> extends Collection<E> { }\n```\n\n##### @author\n\n详细描述后面一般使用`@author`​来标记作者，如果一个文件有多个作者来维护就标记多个`@author`​，`@author`​后面可以跟作者姓名(也可以附带邮箱地址)、组织名称(也可以附带组织官网地址)\n\n```java\n// 纯文本作者\n@author Rod Johnson\n\n// 纯文本作者，邮件\n@author Igor Hersht, igorh@ca.ibm.com\n\n// 超链接邮件 纯文本作者\n@author <a href=\"mailto:ovidiu@cup.hp.com\">Ovidiu Predescu</a>\n\n// 纯文本邮件\n@author shane_curcuru@us.ibm.com\n\n// 纯文本 组织\n@author Apache Software Foundation\n\n// 超链接组织地址 纯文本组织\n@author <a href=\"https://jakarta.apache.org/turbine\"> Apache Jakarta Turbine</a>\n```\n\n##### @see 另请参阅\n\n​`@see`​ 一般用于标记该类相关联的类,@see即可以用在类上，也可以用在方法上。\n\n```java\n/**\n * @see IntStream\n * @see LongStream\n * @see DoubleStream\n * @see <a href=\"package-summary.html\">java.util.stream</a>\n * /\npublic interface Stream<T> extends BaseStream<T, Stream<T>> {}\n```\n\n##### @since 从以下版本开始\n\n​`@since`​ 一般用于标记文件创建时项目当时对应的版本，一般后面跟版本号，也可以跟是一个时间，表示文件当前创建的时间\n\n```java\npackage java.util.stream;\n\n/**\n* @since 1.8\n*/\npublic interface Stream<T> extends BaseStream<T, Stream<T>> { }\n```\n\n```java\npackage org.springframework.util;\n\n/**\n* @since 16 April 2001\n*/\npublic abstract class StringUtils { }\n```\n\n##### @version 版本\n\n​`@version`​用于标记当前版本，默认为1.0\n\n```java\n package com.sun.org.apache.xml.internal.resolver;\n /**\n * @version 1.0\n */\npublic class CatalogManager { }\n```\n\n### 写在方法上的JavaDoc\n\n写在方法上的文档标注一般分为三段：\n\n* 第一段：概要描述，通常用一句或者一段话简要描述该方法的作用，以英文句号作为结束\n* 第二段：详细描述，通常用一段或者多段话来详细描述该方法的作用，一般每段话都以英文句号作为结束\n* 第三段：文档标注，用于标注参数、返回值、异常、参阅等\n\n方法详细描述上经常使用html标签，通常都以p标签开始，而且p标签通常都是单标签，不使用结束标签，其中使用最多的就是p标签和pre标签,ul标签, i标签。\n\npre标签可定义预格式化的文本。被包围在pre标签中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体，pre标签的一个常见应用就是用来表示计算机的源代码。\n\n一般p经常结合pre使用，或者pre结合@code共同使用(推荐@code方式)  \n一般经常使用pre来举例如何使用方法\n\n**注意：pre标签中如果有小于号、大于号、例如泛型 在生产javadoc时会报错**\n\np结合pre使用\n\n```java\n/**\n * Check that the given {@code CharSequence} is neither {@code null} nor\n * of length 0.\n * <p>Note: this method returns {@code true} for a {@code CharSequence}\n * that purely consists of whitespace.\n * <p><pre class=\"code\">\n * StringUtils.hasLength(null) = false\n * StringUtils.hasLength(\"\") = false\n * StringUtils.hasLength(\" \") = true\n * StringUtils.hasLength(\"Hello\") = true\n * </pre>\n * @param str the {@code CharSequence} to check (may be {@code null})\n * @return {@code true} if the {@code CharSequence} is not {@code null} and has length\n * @see #hasText(String)\n */\npublic static boolean hasLength(@Nullable CharSequence str) { \n\treturn (str != null && str.length() > 0);\n}\n```\n\npre结合@code使用\n\n```java\n<pre>{ @code\n     Person[] men = people.stream()\n                        .filter(p -> p.getGender() == MALE)\n                        .toArray(Person[]::new);\n}</pre>\n```\n\n##### @param\n\n​`@param`​ 后面跟参数名，再跟参数描述\n\n```java\n/**\n * @param str the {@code CharSequence} to check (may be {@code null})\n */\npublic static boolean hasText(@Nullable CharSequence str) { \n\treturn (str != null && str.length() > 0 && containsText(str));\n}\n```\n\n##### @return\n\n​`@return`​ 跟返回值的描述\n\n```java\n/**\n * @return {@code true} if the {@code CharSequence} is not {@code null},\n * its length is greater than 0, and it does not contain whitespace only\n */\npublic static boolean hasText(@Nullable CharSequence str) { \n\treturn (str != null && str.length() > 0 && containsText(str));\n}\n```\n\n##### @[throws](https://so.csdn.net/so/search?q=throws&spm=1001.2101.3001.7020)\n\n​`@throws`​ 跟异常类型 异常描述 , 用于描述方法内部可能抛出的异常\n\n```java\n/**\n * @throws IllegalArgumentException when the given source contains invalid encoded sequences\n */\npublic static String uriDecode(String source, Charset charset) { }\n```\n\n##### @exception\n\n​`@exception`​ 用于描述方法签名throws对应的异常\n\n```java\npackage com.sun.jmx.remote.security;\n/**\n * @exception LoginException if the logout fails.\n */\npublic boolean logout() throws LoginException { }\n```\n\n##### @deprecated\n\n​`@deprecated`​ 用于标注一个类或成员已过期,通常配合`{@link}`​使用\n\n```java\n/**\n* @deprecated as of 5.0.4, in favor of {@link Locale#toLanguageTag()}\n*/\n@Deprecated\npublic static String toLanguageTag(Locale locale) { \nreturn locale.getLanguage() + (hasText(locale.getCountry()) ? \"-\" + locale.getCountry() : \"\");\n}\n```\n\n##### @see\n\n​`@see`​ 既可以用来类上也可以用在方法上，表示可以参考的类或者方法\n\n```java\n/**\n* @see java.net.URLDecoder#decode(String, String)\n*/\npublic static String uriDecode(String source, Charset charset) { }\n```\n\n##### @value\n\n​`{@value}`​ 用于标注在常量上用于表示常量的值\n\n```java\n/** 默认数量 {@value} */\nprivate static final Integer QUANTITY = 1;\n```\n\n##### @inheritDoc\n\n​`@inheritDoc`​ 用于注解在重写方法或者子类上，用于继承父类中的Javadoc\n\n* 基类的文档注释被继承到了子类\n* 子类可以再加入自己的注释（特殊化扩展）\n* @return @param @throws 也会被继承\n\n### 示例\n\nspring-core中的StringUtils 示例\n\n```java\npackage org.springframework.util;\n/**\n * Miscellaneous {@link String} utility methods.\n *\n * <p>Mainly for internal use within the framework; consider\n * <a href=\"http://commons.apache.org/proper/commons-lang/\">Apache's Commons Lang</a>\n * for a more comprehensive suite of {@code String} utilities.\n *\n * <p>This class delivers some simple functionality that should really be\n * provided by the core Java {@link String} and {@link StringBuilder}\n * classes. It also provides easy-to-use methods to convert between\n * delimited strings, such as CSV strings, and collections and arrays.\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Keith Donald\n * @author Rob Harrop\n * @author Rick Evans\n * @author Arjen Poutsma\n * @author Sam Brannen\n * @author Brian Clozel\n * @since 16 April 2001\n */\npublic abstract class StringUtils { \n\t/**\n\t * Check that the given {@code CharSequence} is neither {@code null} nor\n\t * of length 0.\n\t * <p>Note: this method returns {@code true} for a {@code CharSequence}\n\t * that purely consists of whitespace.\n\t * <p><pre class=\"code\">\n\t * StringUtils.hasLength(null) = false\n\t * StringUtils.hasLength(\"\") = false\n\t * StringUtils.hasLength(\" \") = true\n\t * StringUtils.hasLength(\"Hello\") = true\n\t * </pre>\n\t * @param str the {@code CharSequence} to check (may be {@code null})\n\t * @return {@code true} if the {@code CharSequence} is not {@code null} and has length\n\t * @see #hasText(String)\n\t */\n\tpublic static boolean hasLength(@Nullable CharSequence str) { \n\t\treturn (str != null && str.length() > 0);\n\t}\n}\n```\n\n亲自实践\n\n```java\npackage com.example.javadocdemo;\n\nimport java.math.BigDecimal;\nimport java.util.Objects;\n\n/**\n * 类 {@code OrderService} 订单服务层.\n *\n * <p> 主要包括 创建订单、取消订单、查询订单等功能更\n *\n * @see Order\n * @author <a href=\"mailto:lerryli@foxmail.com\">Lerry Li</a>\n * @since 2019/05/06\n */\npublic class OrderService { \n\n    /** 默认数量 {@value} */\n    private static final Integer QUANTITY = 1;\n\n    /**\n     * 创建订单.\n     *\n     * <p> 创建订单需要传用户id和商品列表(商品id和商品数量).\n     *\n     * <pre>{@code\n     *  演示如何使用该方法\n     *  List<Goods> items = new ArrayList<>();\n     *  Goods goods = new Goods(1L, BigDecimal.ONE);\n     *  Goods goods2 = new Goods(2L, BigDecimal.TEN);\n     *  items.add(goods);\n     *  items.add(goods2);\n     *\n     *  Order order1 = new Order();\n     *  order.setUserId(\"1\");\n     *  order.setItems(items);\n     *  OrderService#createOrder(order);\n     * }\n     * </pre>\n     *\n     * @param order 订单信息\n     * @throws NullPointerException 参数信息为空\n     * @exception IllegalArgumentException  数量不合法\n     * @return 是否创建成功\n     * @version 1.0\n     * @see Order\n     */\n    public boolean createOrder(Order order) throws IllegalArgumentException{ \n        Objects.requireNonNull(order);\n\n        List<Goods> items = order.getItems();\n        items.forEach(goods -> { \n            BigDecimal quantity = goods.getQuantity();\n            if (quantity <span style=\"font-weight: bold;\" class=\"mark\"> null || BigDecimal.ZERO.compareTo(quantity) </span> 0) { \n                throw new IllegalArgumentException();\n            }\n        });\n\n        System.out.println(\"create order...\");\n\n        return true;\n    }\n}\n```\n\n### 生成JavaDoc\n\n通过IDEA生成Javadoc： Tools –> Generate JavaDoc  \n注意要配置编码，如果不配置则生成的JavaDoc会乱码，还需要配置Output directory  \n​![Generate JavaDoc](http://127.0.0.1:6806/assets/20190506232720436-20231024140302-7qr2y3q.png)  \n​![参数配置](http://127.0.0.1:6806/assets/20190506234058735-20231024140302-29lw0lj.png)  \n这里有几点要特别注意一下：\n\n1. IDEA 的 JavaDoc 生成功能在菜单 Tools->Generate JavaDoc 项里面。\n2. 点击上述菜单项后，会出现生成 JavaDoc 的对话框，一般的选项都很直观，不必细说。但是要注意生成 JavaDoc 的源代码对象的选择，一般以模块（Module）为主，必要时可以单独选择必要的 Java 源代码文件，不推荐以 Project 为 JavaDoc 生成的源范围。\n3. 里面有一个 Locale 可选填项，表示的是需要生成的 JavaDoc 以何种语言版本展示，根据 javadoc.exe 的帮助说明，这其实对应的就是 javadoc.exe 的 -locale 参数，如果不填，默认可能是英文或者是当前操作系统的语言，既然是国人，建议在此填写 zh_CN，这样生成的 JavaDoc 就是中文版本的，当然指的是 JavaDoc 的框架中各种通用的固定显示区域都是中文的。你自己编写的注释转换的内容还是根据你注释的内容来。\n4. 还有一个“Other command line arguments:”可选填项，非常重要，是填写直接向 javadoc.exe 传递的参数内容。因为有一些重要的设置，只能通过直接参数形式向 javadoc.exe 传递。这里必须要填写如下参数：\n\n```\n-encoding UTF-8 -charset UTF-8 -windowtitle \"JavaDoc使用详解\" -link https://docs.oracle.com/javase/8/docs/api\n```\n\n5. 第一个参数 -encoding UTF-8 表示你的源代码（含有符合 JavaDoc 标准的注释）是基于 UTF-8 编码的，以免处理过程中出现中文等非英语字符乱码；第二个参数 -charset UTF-8 表示在处理并生成 JavaDoc 超文本时使用的字符集也是以 UTF-8 为编码，目前所有浏览器都支持 UTF-8，这样最具有通用性，支持中文非常好；第三个参数 -windowtitle 表示生成的 JavaDoc 超文本在浏览器中打开时，浏览器窗口标题栏显示的文字内容；第四个参数 -link 很重要，它表示你生成的 JavaDoc 中涉及到很多对其他外部 Java 类的引用，是使用全限定名称还是带有超链接的短名称，举个例子，我创建了一个方法 public void func(String arg)，这个方法在生成 JavaDoc 时如果不指定 -link 参数，则 JavaDoc 中对该方法的表述就会自动变为 public void func(java.lang.String arg)，因为 String 这个类对我自己实现的类来讲就是外部引用的类，虽然它是 Java 标准库的类。如果指定了 -link [https://docs.oracle.com/javase/8/docs/api/](https://docs.oracle.com/javase/8/docs/api/) 参数，则 javadoc.exe 在生成 JavaDoc 时，会使用 String 这样的短名称而非全限定名称 java.lang.String，同时自动为 String 短名称生成一个超链接，指向官方 JavaSE 标准文档 [https://docs.oracle.com/javase/8/docs/api/](https://docs.oracle.com/javase/8/docs/api/) 中对 String 类的详细文档地址。-link 实质上是告诉 javadoc.exe 根据提供的外部引用类的 JavaDoc 地址去找一个叫 package-list 的文本文件，在这个文本文件中包含了所有外部引用类的全限定名称，因此生成的新 JavaDoc 不必使用外部引用类的全限定名，只需要使用短名称，同时可以自动创建指向其外部引用 JavaDoc 中的详细文档超链接。每个 JavaDoc 都会在根目录下有一个 package-list 文件，包括我们自己生成的 JavaDoc。\n\n### 查看成果\n\n配置完毕后点击`OK`​按钮,console看到如下日志输出则说明JavaDoc生成成功  \n​![生成JavaDoc](http://127.0.0.1:6806/assets/20190506235158770-20231024140302-5ci4h2j.png)  \nJavaDoc 生成完毕，即可在其根目录下找到 index.html 文件，打开它就可以看到我们自己的标准 JavaDoc API 文档啦。  \n​![生成后的JavaDoc](http://127.0.0.1:6806/assets/201905062353345-20231024140302-m70gtbv.png)  \n​![类结构](http://127.0.0.1:6806/assets/20190506235431735-20231024140302-5cmeeml.png)  \n​![方法资料](http://127.0.0.1:6806/assets/20190506235511278-20231024140302-29qmwak.png)​\n\n---\n\n​![](http://127.0.0.1:6806/assets/20180623202835803-20231024140302-s4rfuzd.png)​\n","slug":"java-document-comments-javadoc-s-detailed-explanationcsdn-blog-bdrh6","published":1,"__permalink":"/post/java-document-comments-javadoc-s-detailed-explanationcsdn-blog-bdrh6.html","layout":"post","photos":[],"link":"","_id":"clo42qkqg00004srafg1d6h6k","content":"<h1 id=\"Java文档注释用法-JavaDoc的使用详解-CSDN博客\"><a href=\"#Java文档注释用法-JavaDoc的使用详解-CSDN博客\" class=\"headerlink\" title=\"Java文档注释用法+JavaDoc的使用详解-CSDN博客\"></a>Java文档注释用法+JavaDoc的使用详解-CSDN博客</h1><hr>\n<ul>\n<li><a href=\"https://blog.csdn.net/lsy0903/article/details/89893934\">https://blog.csdn.net/lsy0903/article/details/89893934</a></li>\n<li>Java文档注释+JavaDoc的使用详解简介文档注释负责描述类、接口、方法、构造器、成员属性。可以被JDK提供的工具 javadoc 所解析，自动生成一套以网页文件形式体现该程序说明文档的注释。注意：文档注释必须写在类、接口、方法、构造器、成员字段前面，写在其他位置无效。JavaDoc 官方说明How to Write Doc Comments for the Javadoc Tool…_javadoc</li>\n<li>2023-10-24 14:03:02</li>\n</ul>\n<p>‍</p>\n<hr>\n<h2 id=\"Java文档注释-JavaDoc的使用详解\"><a href=\"#Java文档注释-JavaDoc的使用详解\" class=\"headerlink\" title=\"Java文档注释+JavaDoc的使用详解\"></a>Java文档注释+JavaDoc的使用详解</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>文档注释负责描述类、接口、方法、构造器、成员属性。可以被JDK提供的工具 javadoc 所解析，自动生成一套以网页文件形式体现该程序说明文档的注释。</p>\n<p>注意：文档注释必须写在类、接口、方法、构造器、成员字段前面，写在其他位置无效。</p>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html\">JavaDoc 官方说明</a><br><a href=\"https://www.oracle.com/technetwork/java/javase/documentation/index-137868.html\">How to Write Doc Comments for the Javadoc Tool</a></p>\n<h3 id=\"写在类上面的JavaDoc\"><a href=\"#写在类上面的JavaDoc\" class=\"headerlink\" title=\"写在类上面的JavaDoc\"></a>写在类上面的JavaDoc</h3><p>写在类上的文档标注一般分为三段：</p>\n<ul>\n<li>第一段：概要描述，通常用一句或者一段话简要描述该类的作用，以英文句号作为结束</li>\n<li>第二段：详细描述，通常用一段或者多段话来详细描述该类的作用，一般每段话都以英文句号作为结束</li>\n<li>第三段：文档标注，用于标注作者、创建时间、参阅类等信息</li>\n</ul>\n<h4 id=\"第一段：概要描述\"><a href=\"#第一段：概要描述\" class=\"headerlink\" title=\"第一段：概要描述\"></a>第一段：概要描述</h4><p>单行示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.jdbc.core;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Simple adapter for &#123;<span class=\"doctag\">@link</span> PreparedStatementSetter&#125; that applies a given array of arguments.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArgumentPreparedStatementSetter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PreparedStatementSetter</span>, ParameterDisposer &#123; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>多行示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.lang;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The &#123;<span class=\"doctag\">@code</span> Long&#125; class wraps a value of the primitive type &#123;<span class=\"doctag\">@code</span></span></span><br><span class=\"line\"><span class=\"comment\"> * long&#125; in an object. An object of type &#123;<span class=\"doctag\">@code</span> Long&#125; contains a</span></span><br><span class=\"line\"><span class=\"comment\"> * single field whose type is &#123;<span class=\"doctag\">@code</span> long&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt; In addition, this class provides several methods for converting</span></span><br><span class=\"line\"><span class=\"comment\"> * a &#123;<span class=\"doctag\">@code</span> long&#125; to a &#123;<span class=\"doctag\">@code</span> String&#125; and a &#123;<span class=\"doctag\">@code</span> String&#125; to a &#123;<span class=\"doctag\">@code</span></span></span><br><span class=\"line\"><span class=\"comment\"> * long&#125;, as well as other constants and methods useful when dealing</span></span><br><span class=\"line\"><span class=\"comment\"> * with a &#123;<span class=\"doctag\">@code</span> long&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Implementation note: The implementations of the &quot;bit twiddling&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> * methods (such as &#123;<span class=\"doctag\">@link</span> #highestOneBit(long) highestOneBit&#125; and</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #numberOfTrailingZeros(long) numberOfTrailingZeros&#125;) are</span></span><br><span class=\"line\"><span class=\"comment\"> * based on material from Henry S. Warren, Jr.&#x27;s &lt;i&gt;Hacker&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\"> * Delight&lt;/i&gt;, (Addison Wesley, 2002).</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>  Lee Boynton</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>  Arthur van Hoff</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>  Josh Bloch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>  Joseph D. Darcy</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span>   JDK1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Long</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparable</span>&lt;Long&gt; &#123; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在注释中出现以@开头的东东被称之为Javadoc文档标记，是JDK定义好的如@author、@version、@since、@see、@link、@code、@param、@return、@exception、@throws等。</p>\n<h5 id=\"link：-link-包名-类名-方法名-参数类型-用于快速链接到相关代码\"><a href=\"#link：-link-包名-类名-方法名-参数类型-用于快速链接到相关代码\" class=\"headerlink\" title=\"@link： {@link 包名.类名#方法名(参数类型)} 用于快速链接到相关代码\"></a>@link： {@link 包名.类名#方法名(参数类型)} 用于快速链接到相关代码</h5><p>@link的使用语法<code>&#123;@link 包名.类名#方法名(参数类型)&#125;</code>​，其中当包名在当前类中已经导入了包名可以省略，可以只是一个​<strong>类名</strong>​，也可以是仅仅是一个​<strong>方法名</strong>​，也可以是​<strong>类名.方法名</strong>​，使用此文档标记的类或者方法，可用按住<strong>Ctrl键+鼠标单击</strong>快速跳到相应的类或者方法上，解析成html其实就是使用<code>&lt;code&gt;包名.类名#方法名(参数类型)&lt;/code&gt;</code>​</p>\n<p>@link示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 完全限定的类名</span></span><br><span class=\"line\">&#123; <span class=\"meta\">@link</span> java.nio.charset.CharsetEncoder&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 省略包名</span></span><br><span class=\"line\">&#123; <span class=\"meta\">@link</span> String&#125; and &#123; <span class=\"meta\">@link</span> StringBuilder&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 省略类名，表示指向当前的某个方法</span></span><br><span class=\"line\">&#123; <span class=\"meta\">@link</span> #equals(Object)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包名.类名#方法名(参数类型)</span></span><br><span class=\"line\">&#123; <span class=\"meta\">@link</span> java.lang.Long#toString(<span class=\"type\">long</span>)&#125; </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"code：-code-text-将文本标记为code\"><a href=\"#code：-code-text-将文本标记为code\" class=\"headerlink\" title=\"@code： {@code text} 将文本标记为code\"></a>@code： {@code text} 将文本标记为code</h5><p>@code的使用语法<code>&#123;@code text&#125;</code>​ 会被解析成<code>&lt;code&gt;text&lt;/code&gt;</code>​<br>将文本标记为代码样式的文本，在code内部可以使用 &lt; 、&gt; 等不会被解释成html标签, code标签有自己的样式</p>\n<p>一般在Javadoc中只要涉及到类名或者方法名，都需要使用@code进行标记。</p>\n<h4 id=\"第二段：详细描述\"><a href=\"#第二段：详细描述\" class=\"headerlink\" title=\"第二段：详细描述\"></a>第二段：详细描述</h4><p>详细描述一般用一段或多段来详细描述类的作用，详细描述中可以使用html标签，如<code>&lt;p&gt;</code>​、<code>&lt;pre&gt;</code>​、<code>&lt;a&gt;</code>​、<code>&lt;ul&gt;</code>​、<code>&lt;i&gt;</code>​ 等标签， 通常详细描述都以段落p标签开始。<br>详细描述和概要描述中间通常有一个空行来分割， 实例如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.util;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Miscellaneous &#123;<span class=\"doctag\">@link</span> String&#125; utility methods.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Mainly for internal use within the framework; consider</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;a href=&quot;http://commons.apache.org/proper/commons-lang/&quot;&gt;Apache&#x27;s Commons Lang&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * for a more comprehensive suite of &#123;<span class=\"doctag\">@code</span> String&#125; utilities.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;This class delivers some simple functionality that should really be</span></span><br><span class=\"line\"><span class=\"comment\"> * provided by the core Java &#123;<span class=\"doctag\">@link</span> String&#125; and &#123;<span class=\"doctag\">@link</span> StringBuilder&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * classes. It also provides easy-to-use methods to convert between</span></span><br><span class=\"line\"><span class=\"comment\"> * delimited strings, such as CSV strings, and collections and arrays.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Rod Johnson</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Juergen Hoeller</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Keith Donald</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Rob Harrop</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Rick Evans</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Arjen Poutsma</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Sam Brannen</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Brian Clozel</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 16 April 2001</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringUtils</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>一般段落都用p标签来标记，凡涉及到类名和方法名都用<code>@code</code>​标记，凡涉及到组织的，一般用a标签提供出来链接地址。</p>\n<h5 id=\"param\"><a href=\"#param\" class=\"headerlink\" title=\"@param\"></a>@param</h5><p>一般类中支持泛型时会通过<code>@param</code>​来解释泛型的类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.util;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;E&gt; the type of elements in this list</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">List</span>&lt;E&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">Collection</span>&lt;E&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"author\"><a href=\"#author\" class=\"headerlink\" title=\"@author\"></a>@author</h5><p>详细描述后面一般使用<code>@author</code>​来标记作者，如果一个文件有多个作者来维护就标记多个<code>@author</code>​，<code>@author</code>​后面可以跟作者姓名(也可以附带邮箱地址)、组织名称(也可以附带组织官网地址)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 纯文本作者</span></span><br><span class=\"line\"><span class=\"meta\">@author</span> Rod Johnson</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 纯文本作者，邮件</span></span><br><span class=\"line\"><span class=\"meta\">@author</span> Igor Hersht, igorh<span class=\"meta\">@ca</span>.ibm.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 超链接邮件 纯文本作者</span></span><br><span class=\"line\"><span class=\"meta\">@author</span> &lt;a href=<span class=\"string\">&quot;mailto:ovidiu@cup.hp.com&quot;</span>&gt;Ovidiu Predescu&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 纯文本邮件</span></span><br><span class=\"line\"><span class=\"meta\">@author</span> shane_curcuru<span class=\"meta\">@us</span>.ibm.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 纯文本 组织</span></span><br><span class=\"line\"><span class=\"meta\">@author</span> Apache Software Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 超链接组织地址 纯文本组织</span></span><br><span class=\"line\"><span class=\"meta\">@author</span> &lt;a href=<span class=\"string\">&quot;https://jakarta.apache.org/turbine&quot;</span>&gt; Apache Jakarta Turbine&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"see-另请参阅\"><a href=\"#see-另请参阅\" class=\"headerlink\" title=\"@see 另请参阅\"></a>@see 另请参阅</h5><p>​<code>@see</code>​ 一般用于标记该类相关联的类,@see即可以用在类上，也可以用在方法上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> IntStream</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> LongStream</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> DoubleStream</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> &lt;a href=&quot;package-summary.html&quot;&gt;java.util.stream&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * /</span></span><br><span class=\"line\"><span class=\"comment\">public interface Stream&lt;T&gt; extends BaseStream&lt;T, Stream&lt;T&gt;&gt; &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"since-从以下版本开始\"><a href=\"#since-从以下版本开始\" class=\"headerlink\" title=\"@since 从以下版本开始\"></a>@since 从以下版本开始</h5><p>​<code>@since</code>​ 一般用于标记文件创建时项目当时对应的版本，一般后面跟版本号，也可以跟是一个时间，表示文件当前创建的时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.util.stream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Stream</span>&lt;T&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseStream</span>&lt;T, Stream&lt;T&gt;&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@since</span> 16 April 2001</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringUtils</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"version-版本\"><a href=\"#version-版本\" class=\"headerlink\" title=\"@version 版本\"></a>@version 版本</h5><p>​<code>@version</code>​用于标记当前版本，默认为1.0</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">package</span> com.sun.org.apache.xml.internal.resolver;</span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CatalogManager</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写在方法上的JavaDoc\"><a href=\"#写在方法上的JavaDoc\" class=\"headerlink\" title=\"写在方法上的JavaDoc\"></a>写在方法上的JavaDoc</h3><p>写在方法上的文档标注一般分为三段：</p>\n<ul>\n<li>第一段：概要描述，通常用一句或者一段话简要描述该方法的作用，以英文句号作为结束</li>\n<li>第二段：详细描述，通常用一段或者多段话来详细描述该方法的作用，一般每段话都以英文句号作为结束</li>\n<li>第三段：文档标注，用于标注参数、返回值、异常、参阅等</li>\n</ul>\n<p>方法详细描述上经常使用html标签，通常都以p标签开始，而且p标签通常都是单标签，不使用结束标签，其中使用最多的就是p标签和pre标签,ul标签, i标签。</p>\n<p>pre标签可定义预格式化的文本。被包围在pre标签中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体，pre标签的一个常见应用就是用来表示计算机的源代码。</p>\n<p>一般p经常结合pre使用，或者pre结合@code共同使用(推荐@code方式)<br>一般经常使用pre来举例如何使用方法</p>\n<p><strong>注意：pre标签中如果有小于号、大于号、例如泛型 在生产javadoc时会报错</strong></p>\n<p>p结合pre使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Check that the given &#123;<span class=\"doctag\">@code</span> CharSequence&#125; is neither &#123;<span class=\"doctag\">@code</span> null&#125; nor</span></span><br><span class=\"line\"><span class=\"comment\"> * of length 0.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Note: this method returns &#123;<span class=\"doctag\">@code</span> true&#125; for a &#123;<span class=\"doctag\">@code</span> CharSequence&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * that purely consists of whitespace.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;&lt;pre class=&quot;code&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * StringUtils.hasLength(null) = false</span></span><br><span class=\"line\"><span class=\"comment\"> * StringUtils.hasLength(&quot;&quot;) = false</span></span><br><span class=\"line\"><span class=\"comment\"> * StringUtils.hasLength(&quot; &quot;) = true</span></span><br><span class=\"line\"><span class=\"comment\"> * StringUtils.hasLength(&quot;Hello&quot;) = true</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> str the &#123;<span class=\"doctag\">@code</span> CharSequence&#125; to check (may be &#123;<span class=\"doctag\">@code</span> null&#125;)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if the &#123;<span class=\"doctag\">@code</span> CharSequence&#125; is not &#123;<span class=\"doctag\">@code</span> null&#125; and has length</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #hasText(String)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasLength</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> CharSequence str)</span> &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (str != <span class=\"literal\">null</span> &amp;&amp; str.length() &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>pre结合@code使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre&gt;&#123; <span class=\"meta\">@code</span></span><br><span class=\"line\">     Person[] men = people.stream()</span><br><span class=\"line\">                        .filter(p -&gt; p.getGender() == MALE)</span><br><span class=\"line\">                        .toArray(Person[]::<span class=\"keyword\">new</span>);</span><br><span class=\"line\">&#125;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"param-1\"><a href=\"#param-1\" class=\"headerlink\" title=\"@param\"></a>@param</h5><p>​<code>@param</code>​ 后面跟参数名，再跟参数描述</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> str the &#123;<span class=\"doctag\">@code</span> CharSequence&#125; to check (may be &#123;<span class=\"doctag\">@code</span> null&#125;)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasText</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> CharSequence str)</span> &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (str != <span class=\"literal\">null</span> &amp;&amp; str.length() &gt; <span class=\"number\">0</span> &amp;&amp; containsText(str));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"@return\"></a>@return</h5><p>​<code>@return</code>​ 跟返回值的描述</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if the &#123;<span class=\"doctag\">@code</span> CharSequence&#125; is not &#123;<span class=\"doctag\">@code</span> null&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> * its length is greater than 0, and it does not contain whitespace only</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasText</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> CharSequence str)</span> &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (str != <span class=\"literal\">null</span> &amp;&amp; str.length() &gt; <span class=\"number\">0</span> &amp;&amp; containsText(str));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"throws\"><a href=\"#throws\" class=\"headerlink\" title=\"@throws\"></a>@<a href=\"https://so.csdn.net/so/search?q=throws&spm=1001.2101.3001.7020\">throws</a></h5><p>​<code>@throws</code>​ 跟异常类型 异常描述 , 用于描述方法内部可能抛出的异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IllegalArgumentException when the given source contains invalid encoded sequences</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">uriDecode</span><span class=\"params\">(String source, Charset charset)</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"exception\"><a href=\"#exception\" class=\"headerlink\" title=\"@exception\"></a>@exception</h5><p>​<code>@exception</code>​ 用于描述方法签名throws对应的异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sun.jmx.remote.security;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@exception</span> LoginException if the logout fails.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">logout</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> LoginException &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"deprecated\"><a href=\"#deprecated\" class=\"headerlink\" title=\"@deprecated\"></a>@deprecated</h5><p>​<code>@deprecated</code>​ 用于标注一个类或成员已过期,通常配合<code>&#123;@link&#125;</code>​使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@deprecated</span> as of 5.0.4, in favor of &#123;<span class=\"doctag\">@link</span> Locale#toLanguageTag()&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Deprecated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">toLanguageTag</span><span class=\"params\">(Locale locale)</span> &#123; </span><br><span class=\"line\"><span class=\"keyword\">return</span> locale.getLanguage() + (hasText(locale.getCountry()) ? <span class=\"string\">&quot;-&quot;</span> + locale.getCountry() : <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"see\"><a href=\"#see\" class=\"headerlink\" title=\"@see\"></a>@see</h5><p>​<code>@see</code>​ 既可以用来类上也可以用在方法上，表示可以参考的类或者方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@see</span> java.net.URLDecoder#decode(String, String)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">uriDecode</span><span class=\"params\">(String source, Charset charset)</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"value\"><a href=\"#value\" class=\"headerlink\" title=\"@value\"></a>@value</h5><p>​<code>&#123;@value&#125;</code>​ 用于标注在常量上用于表示常量的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 默认数量 &#123;<span class=\"doctag\">@value</span>&#125; */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">QUANTITY</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"inheritDoc\"><a href=\"#inheritDoc\" class=\"headerlink\" title=\"@inheritDoc\"></a>@inheritDoc</h5><p>​<code>@inheritDoc</code>​ 用于注解在重写方法或者子类上，用于继承父类中的Javadoc</p>\n<ul>\n<li>基类的文档注释被继承到了子类</li>\n<li>子类可以再加入自己的注释（特殊化扩展）</li>\n<li>@return @param @throws 也会被继承</li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>spring-core中的StringUtils 示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.util;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Miscellaneous &#123;<span class=\"doctag\">@link</span> String&#125; utility methods.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Mainly for internal use within the framework; consider</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;a href=&quot;http://commons.apache.org/proper/commons-lang/&quot;&gt;Apache&#x27;s Commons Lang&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * for a more comprehensive suite of &#123;<span class=\"doctag\">@code</span> String&#125; utilities.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;This class delivers some simple functionality that should really be</span></span><br><span class=\"line\"><span class=\"comment\"> * provided by the core Java &#123;<span class=\"doctag\">@link</span> String&#125; and &#123;<span class=\"doctag\">@link</span> StringBuilder&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * classes. It also provides easy-to-use methods to convert between</span></span><br><span class=\"line\"><span class=\"comment\"> * delimited strings, such as CSV strings, and collections and arrays.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Rod Johnson</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Juergen Hoeller</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Keith Donald</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Rob Harrop</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Rick Evans</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Arjen Poutsma</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Sam Brannen</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Brian Clozel</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 16 April 2001</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringUtils</span> &#123; </span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Check that the given &#123;<span class=\"doctag\">@code</span> CharSequence&#125; is neither &#123;<span class=\"doctag\">@code</span> null&#125; nor</span></span><br><span class=\"line\"><span class=\"comment\">\t * of length 0.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;Note: this method returns &#123;<span class=\"doctag\">@code</span> true&#125; for a &#123;<span class=\"doctag\">@code</span> CharSequence&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * that purely consists of whitespace.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;&lt;pre class=&quot;code&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * StringUtils.hasLength(null) = false</span></span><br><span class=\"line\"><span class=\"comment\">\t * StringUtils.hasLength(&quot;&quot;) = false</span></span><br><span class=\"line\"><span class=\"comment\">\t * StringUtils.hasLength(&quot; &quot;) = true</span></span><br><span class=\"line\"><span class=\"comment\">\t * StringUtils.hasLength(&quot;Hello&quot;) = true</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str the &#123;<span class=\"doctag\">@code</span> CharSequence&#125; to check (may be &#123;<span class=\"doctag\">@code</span> null&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if the &#123;<span class=\"doctag\">@code</span> CharSequence&#125; is not &#123;<span class=\"doctag\">@code</span> null&#125; and has length</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> #hasText(String)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasLength</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> CharSequence str)</span> &#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (str != <span class=\"literal\">null</span> &amp;&amp; str.length() &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>亲自实践</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.javadocdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类 &#123;<span class=\"doctag\">@code</span> OrderService&#125; 订单服务层.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt; 主要包括 创建订单、取消订单、查询订单等功能更</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> Order</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:lerryli@foxmail.com&quot;&gt;Lerry Li&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2019/05/06</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrderService</span> &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 默认数量 &#123;<span class=\"doctag\">@value</span>&#125; */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">QUANTITY</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建订单.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt; 创建订单需要传用户id和商品列表(商品id和商品数量).</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;pre&gt;&#123;<span class=\"doctag\">@code</span></span></span><br><span class=\"line\"><span class=\"comment\">     *  演示如何使用该方法</span></span><br><span class=\"line\"><span class=\"comment\">     *  List&lt;Goods&gt; items = new ArrayList&lt;&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">     *  Goods goods = new Goods(1L, BigDecimal.ONE);</span></span><br><span class=\"line\"><span class=\"comment\">     *  Goods goods2 = new Goods(2L, BigDecimal.TEN);</span></span><br><span class=\"line\"><span class=\"comment\">     *  items.add(goods);</span></span><br><span class=\"line\"><span class=\"comment\">     *  items.add(goods2);</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *  Order order1 = new Order();</span></span><br><span class=\"line\"><span class=\"comment\">     *  order.setUserId(&quot;1&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">     *  order.setItems(items);</span></span><br><span class=\"line\"><span class=\"comment\">     *  OrderService#createOrder(order);</span></span><br><span class=\"line\"><span class=\"comment\">     * &#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> order 订单信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> NullPointerException 参数信息为空</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@exception</span> IllegalArgumentException  数量不合法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 是否创建成功</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> Order</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">createOrder</span><span class=\"params\">(Order order)</span> <span class=\"keyword\">throws</span> IllegalArgumentException&#123; </span><br><span class=\"line\">        Objects.requireNonNull(order);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Goods&gt; items = order.getItems();</span><br><span class=\"line\">        items.forEach(goods -&gt; &#123; </span><br><span class=\"line\">            <span class=\"type\">BigDecimal</span> <span class=\"variable\">quantity</span> <span class=\"operator\">=</span> goods.getQuantity();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (quantity &lt;span style=<span class=\"string\">&quot;font-weight: bold;&quot;</span> class=<span class=\"string\">&quot;mark&quot;</span>&gt; <span class=\"literal\">null</span> || BigDecimal.ZERO.compareTo(quantity) &lt;/span&gt; <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;create order...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成JavaDoc\"><a href=\"#生成JavaDoc\" class=\"headerlink\" title=\"生成JavaDoc\"></a>生成JavaDoc</h3><p>通过IDEA生成Javadoc： Tools –&gt; Generate JavaDoc<br>注意要配置编码，如果不配置则生成的JavaDoc会乱码，还需要配置Output directory<br>​<img src=\"http://127.0.0.1:6806/assets/20190506232720436-20231024140302-7qr2y3q.png\" alt=\"Generate JavaDoc\"><br>​<img src=\"http://127.0.0.1:6806/assets/20190506234058735-20231024140302-29lw0lj.png\" alt=\"参数配置\"><br>这里有几点要特别注意一下：</p>\n<ol>\n<li>IDEA 的 JavaDoc 生成功能在菜单 Tools-&gt;Generate JavaDoc 项里面。</li>\n<li>点击上述菜单项后，会出现生成 JavaDoc 的对话框，一般的选项都很直观，不必细说。但是要注意生成 JavaDoc 的源代码对象的选择，一般以模块（Module）为主，必要时可以单独选择必要的 Java 源代码文件，不推荐以 Project 为 JavaDoc 生成的源范围。</li>\n<li>里面有一个 Locale 可选填项，表示的是需要生成的 JavaDoc 以何种语言版本展示，根据 javadoc.exe 的帮助说明，这其实对应的就是 javadoc.exe 的 -locale 参数，如果不填，默认可能是英文或者是当前操作系统的语言，既然是国人，建议在此填写 zh_CN，这样生成的 JavaDoc 就是中文版本的，当然指的是 JavaDoc 的框架中各种通用的固定显示区域都是中文的。你自己编写的注释转换的内容还是根据你注释的内容来。</li>\n<li>还有一个“Other command line arguments:”可选填项，非常重要，是填写直接向 javadoc.exe 传递的参数内容。因为有一些重要的设置，只能通过直接参数形式向 javadoc.exe 传递。这里必须要填写如下参数：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-encoding UTF-8 -charset UTF-8 -windowtitle &quot;JavaDoc使用详解&quot; -link https://docs.oracle.com/javase/8/docs/api</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>第一个参数 -encoding UTF-8 表示你的源代码（含有符合 JavaDoc 标准的注释）是基于 UTF-8 编码的，以免处理过程中出现中文等非英语字符乱码；第二个参数 -charset UTF-8 表示在处理并生成 JavaDoc 超文本时使用的字符集也是以 UTF-8 为编码，目前所有浏览器都支持 UTF-8，这样最具有通用性，支持中文非常好；第三个参数 -windowtitle 表示生成的 JavaDoc 超文本在浏览器中打开时，浏览器窗口标题栏显示的文字内容；第四个参数 -link 很重要，它表示你生成的 JavaDoc 中涉及到很多对其他外部 Java 类的引用，是使用全限定名称还是带有超链接的短名称，举个例子，我创建了一个方法 public void func(String arg)，这个方法在生成 JavaDoc 时如果不指定 -link 参数，则 JavaDoc 中对该方法的表述就会自动变为 public void func(java.lang.String arg)，因为 String 这个类对我自己实现的类来讲就是外部引用的类，虽然它是 Java 标准库的类。如果指定了 -link <a href=\"https://docs.oracle.com/javase/8/docs/api/\">https://docs.oracle.com/javase/8/docs/api/</a> 参数，则 javadoc.exe 在生成 JavaDoc 时，会使用 String 这样的短名称而非全限定名称 java.lang.String，同时自动为 String 短名称生成一个超链接，指向官方 JavaSE 标准文档 <a href=\"https://docs.oracle.com/javase/8/docs/api/\">https://docs.oracle.com/javase/8/docs/api/</a> 中对 String 类的详细文档地址。-link 实质上是告诉 javadoc.exe 根据提供的外部引用类的 JavaDoc 地址去找一个叫 package-list 的文本文件，在这个文本文件中包含了所有外部引用类的全限定名称，因此生成的新 JavaDoc 不必使用外部引用类的全限定名，只需要使用短名称，同时可以自动创建指向其外部引用 JavaDoc 中的详细文档超链接。每个 JavaDoc 都会在根目录下有一个 package-list 文件，包括我们自己生成的 JavaDoc。</li>\n</ol>\n<h3 id=\"查看成果\"><a href=\"#查看成果\" class=\"headerlink\" title=\"查看成果\"></a>查看成果</h3><p>配置完毕后点击<code>OK</code>​按钮,console看到如下日志输出则说明JavaDoc生成成功<br>​<img src=\"http://127.0.0.1:6806/assets/20190506235158770-20231024140302-5ci4h2j.png\" alt=\"生成JavaDoc\"><br>JavaDoc 生成完毕，即可在其根目录下找到 index.html 文件，打开它就可以看到我们自己的标准 JavaDoc API 文档啦。<br>​<img src=\"http://127.0.0.1:6806/assets/201905062353345-20231024140302-m70gtbv.png\" alt=\"生成后的JavaDoc\"><br>​<img src=\"http://127.0.0.1:6806/assets/20190506235431735-20231024140302-5cmeeml.png\" alt=\"类结构\"><br>​<img src=\"http://127.0.0.1:6806/assets/20190506235511278-20231024140302-29qmwak.png\" alt=\"方法资料\">​</p>\n<hr>\n<p>​<img src=\"http://127.0.0.1:6806/assets/20180623202835803-20231024140302-s4rfuzd.png\">​</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java文档注释用法-JavaDoc的使用详解-CSDN博客\"><a href=\"#Java文档注释用法-JavaDoc的使用详解-CSDN博客\" class=\"headerlink\" title=\"Java文档注释用法+JavaDoc的使用详解-CSDN博客\"></a>Java文档注释用法+JavaDoc的使用详解-CSDN博客</h1><hr>\n<ul>\n<li><a href=\"https://blog.csdn.net/lsy0903/article/details/89893934\">https://blog.csdn.net/lsy0903/article/details/89893934</a></li>\n<li>Java文档注释+JavaDoc的使用详解简介文档注释负责描述类、接口、方法、构造器、成员属性。可以被JDK提供的工具 javadoc 所解析，自动生成一套以网页文件形式体现该程序说明文档的注释。注意：文档注释必须写在类、接口、方法、构造器、成员字段前面，写在其他位置无效。JavaDoc 官方说明How to Write Doc Comments for the Javadoc Tool…_javadoc</li>\n<li>2023-10-24 14:03:02</li>\n</ul>\n<p>‍</p>\n<hr>\n<h2 id=\"Java文档注释-JavaDoc的使用详解\"><a href=\"#Java文档注释-JavaDoc的使用详解\" class=\"headerlink\" title=\"Java文档注释+JavaDoc的使用详解\"></a>Java文档注释+JavaDoc的使用详解</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>文档注释负责描述类、接口、方法、构造器、成员属性。可以被JDK提供的工具 javadoc 所解析，自动生成一套以网页文件形式体现该程序说明文档的注释。</p>\n<p>注意：文档注释必须写在类、接口、方法、构造器、成员字段前面，写在其他位置无效。</p>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html\">JavaDoc 官方说明</a><br><a href=\"https://www.oracle.com/technetwork/java/javase/documentation/index-137868.html\">How to Write Doc Comments for the Javadoc Tool</a></p>\n<h3 id=\"写在类上面的JavaDoc\"><a href=\"#写在类上面的JavaDoc\" class=\"headerlink\" title=\"写在类上面的JavaDoc\"></a>写在类上面的JavaDoc</h3><p>写在类上的文档标注一般分为三段：</p>\n<ul>\n<li>第一段：概要描述，通常用一句或者一段话简要描述该类的作用，以英文句号作为结束</li>\n<li>第二段：详细描述，通常用一段或者多段话来详细描述该类的作用，一般每段话都以英文句号作为结束</li>\n<li>第三段：文档标注，用于标注作者、创建时间、参阅类等信息</li>\n</ul>\n<h4 id=\"第一段：概要描述\"><a href=\"#第一段：概要描述\" class=\"headerlink\" title=\"第一段：概要描述\"></a>第一段：概要描述</h4><p>单行示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.jdbc.core;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Simple adapter for &#123;<span class=\"doctag\">@link</span> PreparedStatementSetter&#125; that applies a given array of arguments.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArgumentPreparedStatementSetter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PreparedStatementSetter</span>, ParameterDisposer &#123; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>多行示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.lang;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The &#123;<span class=\"doctag\">@code</span> Long&#125; class wraps a value of the primitive type &#123;<span class=\"doctag\">@code</span></span></span><br><span class=\"line\"><span class=\"comment\"> * long&#125; in an object. An object of type &#123;<span class=\"doctag\">@code</span> Long&#125; contains a</span></span><br><span class=\"line\"><span class=\"comment\"> * single field whose type is &#123;<span class=\"doctag\">@code</span> long&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt; In addition, this class provides several methods for converting</span></span><br><span class=\"line\"><span class=\"comment\"> * a &#123;<span class=\"doctag\">@code</span> long&#125; to a &#123;<span class=\"doctag\">@code</span> String&#125; and a &#123;<span class=\"doctag\">@code</span> String&#125; to a &#123;<span class=\"doctag\">@code</span></span></span><br><span class=\"line\"><span class=\"comment\"> * long&#125;, as well as other constants and methods useful when dealing</span></span><br><span class=\"line\"><span class=\"comment\"> * with a &#123;<span class=\"doctag\">@code</span> long&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Implementation note: The implementations of the &quot;bit twiddling&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> * methods (such as &#123;<span class=\"doctag\">@link</span> #highestOneBit(long) highestOneBit&#125; and</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #numberOfTrailingZeros(long) numberOfTrailingZeros&#125;) are</span></span><br><span class=\"line\"><span class=\"comment\"> * based on material from Henry S. Warren, Jr.&#x27;s &lt;i&gt;Hacker&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\"> * Delight&lt;/i&gt;, (Addison Wesley, 2002).</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>  Lee Boynton</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>  Arthur van Hoff</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>  Josh Bloch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>  Joseph D. Darcy</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span>   JDK1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Long</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparable</span>&lt;Long&gt; &#123; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在注释中出现以@开头的东东被称之为Javadoc文档标记，是JDK定义好的如@author、@version、@since、@see、@link、@code、@param、@return、@exception、@throws等。</p>\n<h5 id=\"link：-link-包名-类名-方法名-参数类型-用于快速链接到相关代码\"><a href=\"#link：-link-包名-类名-方法名-参数类型-用于快速链接到相关代码\" class=\"headerlink\" title=\"@link： {@link 包名.类名#方法名(参数类型)} 用于快速链接到相关代码\"></a>@link： {@link 包名.类名#方法名(参数类型)} 用于快速链接到相关代码</h5><p>@link的使用语法<code>&#123;@link 包名.类名#方法名(参数类型)&#125;</code>​，其中当包名在当前类中已经导入了包名可以省略，可以只是一个​<strong>类名</strong>​，也可以是仅仅是一个​<strong>方法名</strong>​，也可以是​<strong>类名.方法名</strong>​，使用此文档标记的类或者方法，可用按住<strong>Ctrl键+鼠标单击</strong>快速跳到相应的类或者方法上，解析成html其实就是使用<code>&lt;code&gt;包名.类名#方法名(参数类型)&lt;/code&gt;</code>​</p>\n<p>@link示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 完全限定的类名</span></span><br><span class=\"line\">&#123; <span class=\"meta\">@link</span> java.nio.charset.CharsetEncoder&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 省略包名</span></span><br><span class=\"line\">&#123; <span class=\"meta\">@link</span> String&#125; and &#123; <span class=\"meta\">@link</span> StringBuilder&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 省略类名，表示指向当前的某个方法</span></span><br><span class=\"line\">&#123; <span class=\"meta\">@link</span> #equals(Object)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包名.类名#方法名(参数类型)</span></span><br><span class=\"line\">&#123; <span class=\"meta\">@link</span> java.lang.Long#toString(<span class=\"type\">long</span>)&#125; </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"code：-code-text-将文本标记为code\"><a href=\"#code：-code-text-将文本标记为code\" class=\"headerlink\" title=\"@code： {@code text} 将文本标记为code\"></a>@code： {@code text} 将文本标记为code</h5><p>@code的使用语法<code>&#123;@code text&#125;</code>​ 会被解析成<code>&lt;code&gt;text&lt;/code&gt;</code>​<br>将文本标记为代码样式的文本，在code内部可以使用 &lt; 、&gt; 等不会被解释成html标签, code标签有自己的样式</p>\n<p>一般在Javadoc中只要涉及到类名或者方法名，都需要使用@code进行标记。</p>\n<h4 id=\"第二段：详细描述\"><a href=\"#第二段：详细描述\" class=\"headerlink\" title=\"第二段：详细描述\"></a>第二段：详细描述</h4><p>详细描述一般用一段或多段来详细描述类的作用，详细描述中可以使用html标签，如<code>&lt;p&gt;</code>​、<code>&lt;pre&gt;</code>​、<code>&lt;a&gt;</code>​、<code>&lt;ul&gt;</code>​、<code>&lt;i&gt;</code>​ 等标签， 通常详细描述都以段落p标签开始。<br>详细描述和概要描述中间通常有一个空行来分割， 实例如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.util;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Miscellaneous &#123;<span class=\"doctag\">@link</span> String&#125; utility methods.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Mainly for internal use within the framework; consider</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;a href=&quot;http://commons.apache.org/proper/commons-lang/&quot;&gt;Apache&#x27;s Commons Lang&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * for a more comprehensive suite of &#123;<span class=\"doctag\">@code</span> String&#125; utilities.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;This class delivers some simple functionality that should really be</span></span><br><span class=\"line\"><span class=\"comment\"> * provided by the core Java &#123;<span class=\"doctag\">@link</span> String&#125; and &#123;<span class=\"doctag\">@link</span> StringBuilder&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * classes. It also provides easy-to-use methods to convert between</span></span><br><span class=\"line\"><span class=\"comment\"> * delimited strings, such as CSV strings, and collections and arrays.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Rod Johnson</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Juergen Hoeller</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Keith Donald</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Rob Harrop</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Rick Evans</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Arjen Poutsma</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Sam Brannen</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Brian Clozel</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 16 April 2001</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringUtils</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>一般段落都用p标签来标记，凡涉及到类名和方法名都用<code>@code</code>​标记，凡涉及到组织的，一般用a标签提供出来链接地址。</p>\n<h5 id=\"param\"><a href=\"#param\" class=\"headerlink\" title=\"@param\"></a>@param</h5><p>一般类中支持泛型时会通过<code>@param</code>​来解释泛型的类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.util;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;E&gt; the type of elements in this list</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">List</span>&lt;E&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">Collection</span>&lt;E&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"author\"><a href=\"#author\" class=\"headerlink\" title=\"@author\"></a>@author</h5><p>详细描述后面一般使用<code>@author</code>​来标记作者，如果一个文件有多个作者来维护就标记多个<code>@author</code>​，<code>@author</code>​后面可以跟作者姓名(也可以附带邮箱地址)、组织名称(也可以附带组织官网地址)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 纯文本作者</span></span><br><span class=\"line\"><span class=\"meta\">@author</span> Rod Johnson</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 纯文本作者，邮件</span></span><br><span class=\"line\"><span class=\"meta\">@author</span> Igor Hersht, igorh<span class=\"meta\">@ca</span>.ibm.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 超链接邮件 纯文本作者</span></span><br><span class=\"line\"><span class=\"meta\">@author</span> &lt;a href=<span class=\"string\">&quot;mailto:ovidiu@cup.hp.com&quot;</span>&gt;Ovidiu Predescu&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 纯文本邮件</span></span><br><span class=\"line\"><span class=\"meta\">@author</span> shane_curcuru<span class=\"meta\">@us</span>.ibm.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 纯文本 组织</span></span><br><span class=\"line\"><span class=\"meta\">@author</span> Apache Software Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 超链接组织地址 纯文本组织</span></span><br><span class=\"line\"><span class=\"meta\">@author</span> &lt;a href=<span class=\"string\">&quot;https://jakarta.apache.org/turbine&quot;</span>&gt; Apache Jakarta Turbine&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"see-另请参阅\"><a href=\"#see-另请参阅\" class=\"headerlink\" title=\"@see 另请参阅\"></a>@see 另请参阅</h5><p>​<code>@see</code>​ 一般用于标记该类相关联的类,@see即可以用在类上，也可以用在方法上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> IntStream</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> LongStream</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> DoubleStream</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> &lt;a href=&quot;package-summary.html&quot;&gt;java.util.stream&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * /</span></span><br><span class=\"line\"><span class=\"comment\">public interface Stream&lt;T&gt; extends BaseStream&lt;T, Stream&lt;T&gt;&gt; &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"since-从以下版本开始\"><a href=\"#since-从以下版本开始\" class=\"headerlink\" title=\"@since 从以下版本开始\"></a>@since 从以下版本开始</h5><p>​<code>@since</code>​ 一般用于标记文件创建时项目当时对应的版本，一般后面跟版本号，也可以跟是一个时间，表示文件当前创建的时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.util.stream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Stream</span>&lt;T&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseStream</span>&lt;T, Stream&lt;T&gt;&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@since</span> 16 April 2001</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringUtils</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"version-版本\"><a href=\"#version-版本\" class=\"headerlink\" title=\"@version 版本\"></a>@version 版本</h5><p>​<code>@version</code>​用于标记当前版本，默认为1.0</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">package</span> com.sun.org.apache.xml.internal.resolver;</span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CatalogManager</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写在方法上的JavaDoc\"><a href=\"#写在方法上的JavaDoc\" class=\"headerlink\" title=\"写在方法上的JavaDoc\"></a>写在方法上的JavaDoc</h3><p>写在方法上的文档标注一般分为三段：</p>\n<ul>\n<li>第一段：概要描述，通常用一句或者一段话简要描述该方法的作用，以英文句号作为结束</li>\n<li>第二段：详细描述，通常用一段或者多段话来详细描述该方法的作用，一般每段话都以英文句号作为结束</li>\n<li>第三段：文档标注，用于标注参数、返回值、异常、参阅等</li>\n</ul>\n<p>方法详细描述上经常使用html标签，通常都以p标签开始，而且p标签通常都是单标签，不使用结束标签，其中使用最多的就是p标签和pre标签,ul标签, i标签。</p>\n<p>pre标签可定义预格式化的文本。被包围在pre标签中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体，pre标签的一个常见应用就是用来表示计算机的源代码。</p>\n<p>一般p经常结合pre使用，或者pre结合@code共同使用(推荐@code方式)<br>一般经常使用pre来举例如何使用方法</p>\n<p><strong>注意：pre标签中如果有小于号、大于号、例如泛型 在生产javadoc时会报错</strong></p>\n<p>p结合pre使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Check that the given &#123;<span class=\"doctag\">@code</span> CharSequence&#125; is neither &#123;<span class=\"doctag\">@code</span> null&#125; nor</span></span><br><span class=\"line\"><span class=\"comment\"> * of length 0.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Note: this method returns &#123;<span class=\"doctag\">@code</span> true&#125; for a &#123;<span class=\"doctag\">@code</span> CharSequence&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * that purely consists of whitespace.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;&lt;pre class=&quot;code&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * StringUtils.hasLength(null) = false</span></span><br><span class=\"line\"><span class=\"comment\"> * StringUtils.hasLength(&quot;&quot;) = false</span></span><br><span class=\"line\"><span class=\"comment\"> * StringUtils.hasLength(&quot; &quot;) = true</span></span><br><span class=\"line\"><span class=\"comment\"> * StringUtils.hasLength(&quot;Hello&quot;) = true</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> str the &#123;<span class=\"doctag\">@code</span> CharSequence&#125; to check (may be &#123;<span class=\"doctag\">@code</span> null&#125;)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if the &#123;<span class=\"doctag\">@code</span> CharSequence&#125; is not &#123;<span class=\"doctag\">@code</span> null&#125; and has length</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #hasText(String)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasLength</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> CharSequence str)</span> &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (str != <span class=\"literal\">null</span> &amp;&amp; str.length() &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>pre结合@code使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre&gt;&#123; <span class=\"meta\">@code</span></span><br><span class=\"line\">     Person[] men = people.stream()</span><br><span class=\"line\">                        .filter(p -&gt; p.getGender() == MALE)</span><br><span class=\"line\">                        .toArray(Person[]::<span class=\"keyword\">new</span>);</span><br><span class=\"line\">&#125;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"param-1\"><a href=\"#param-1\" class=\"headerlink\" title=\"@param\"></a>@param</h5><p>​<code>@param</code>​ 后面跟参数名，再跟参数描述</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> str the &#123;<span class=\"doctag\">@code</span> CharSequence&#125; to check (may be &#123;<span class=\"doctag\">@code</span> null&#125;)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasText</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> CharSequence str)</span> &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (str != <span class=\"literal\">null</span> &amp;&amp; str.length() &gt; <span class=\"number\">0</span> &amp;&amp; containsText(str));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"@return\"></a>@return</h5><p>​<code>@return</code>​ 跟返回值的描述</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if the &#123;<span class=\"doctag\">@code</span> CharSequence&#125; is not &#123;<span class=\"doctag\">@code</span> null&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> * its length is greater than 0, and it does not contain whitespace only</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasText</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> CharSequence str)</span> &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (str != <span class=\"literal\">null</span> &amp;&amp; str.length() &gt; <span class=\"number\">0</span> &amp;&amp; containsText(str));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"throws\"><a href=\"#throws\" class=\"headerlink\" title=\"@throws\"></a>@<a href=\"https://so.csdn.net/so/search?q=throws&spm=1001.2101.3001.7020\">throws</a></h5><p>​<code>@throws</code>​ 跟异常类型 异常描述 , 用于描述方法内部可能抛出的异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IllegalArgumentException when the given source contains invalid encoded sequences</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">uriDecode</span><span class=\"params\">(String source, Charset charset)</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"exception\"><a href=\"#exception\" class=\"headerlink\" title=\"@exception\"></a>@exception</h5><p>​<code>@exception</code>​ 用于描述方法签名throws对应的异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sun.jmx.remote.security;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@exception</span> LoginException if the logout fails.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">logout</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> LoginException &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"deprecated\"><a href=\"#deprecated\" class=\"headerlink\" title=\"@deprecated\"></a>@deprecated</h5><p>​<code>@deprecated</code>​ 用于标注一个类或成员已过期,通常配合<code>&#123;@link&#125;</code>​使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@deprecated</span> as of 5.0.4, in favor of &#123;<span class=\"doctag\">@link</span> Locale#toLanguageTag()&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Deprecated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">toLanguageTag</span><span class=\"params\">(Locale locale)</span> &#123; </span><br><span class=\"line\"><span class=\"keyword\">return</span> locale.getLanguage() + (hasText(locale.getCountry()) ? <span class=\"string\">&quot;-&quot;</span> + locale.getCountry() : <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"see\"><a href=\"#see\" class=\"headerlink\" title=\"@see\"></a>@see</h5><p>​<code>@see</code>​ 既可以用来类上也可以用在方法上，表示可以参考的类或者方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@see</span> java.net.URLDecoder#decode(String, String)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">uriDecode</span><span class=\"params\">(String source, Charset charset)</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"value\"><a href=\"#value\" class=\"headerlink\" title=\"@value\"></a>@value</h5><p>​<code>&#123;@value&#125;</code>​ 用于标注在常量上用于表示常量的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 默认数量 &#123;<span class=\"doctag\">@value</span>&#125; */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">QUANTITY</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"inheritDoc\"><a href=\"#inheritDoc\" class=\"headerlink\" title=\"@inheritDoc\"></a>@inheritDoc</h5><p>​<code>@inheritDoc</code>​ 用于注解在重写方法或者子类上，用于继承父类中的Javadoc</p>\n<ul>\n<li>基类的文档注释被继承到了子类</li>\n<li>子类可以再加入自己的注释（特殊化扩展）</li>\n<li>@return @param @throws 也会被继承</li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>spring-core中的StringUtils 示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.util;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Miscellaneous &#123;<span class=\"doctag\">@link</span> String&#125; utility methods.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Mainly for internal use within the framework; consider</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;a href=&quot;http://commons.apache.org/proper/commons-lang/&quot;&gt;Apache&#x27;s Commons Lang&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * for a more comprehensive suite of &#123;<span class=\"doctag\">@code</span> String&#125; utilities.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;This class delivers some simple functionality that should really be</span></span><br><span class=\"line\"><span class=\"comment\"> * provided by the core Java &#123;<span class=\"doctag\">@link</span> String&#125; and &#123;<span class=\"doctag\">@link</span> StringBuilder&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * classes. It also provides easy-to-use methods to convert between</span></span><br><span class=\"line\"><span class=\"comment\"> * delimited strings, such as CSV strings, and collections and arrays.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Rod Johnson</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Juergen Hoeller</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Keith Donald</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Rob Harrop</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Rick Evans</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Arjen Poutsma</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Sam Brannen</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Brian Clozel</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 16 April 2001</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringUtils</span> &#123; </span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Check that the given &#123;<span class=\"doctag\">@code</span> CharSequence&#125; is neither &#123;<span class=\"doctag\">@code</span> null&#125; nor</span></span><br><span class=\"line\"><span class=\"comment\">\t * of length 0.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;Note: this method returns &#123;<span class=\"doctag\">@code</span> true&#125; for a &#123;<span class=\"doctag\">@code</span> CharSequence&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * that purely consists of whitespace.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;&lt;pre class=&quot;code&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * StringUtils.hasLength(null) = false</span></span><br><span class=\"line\"><span class=\"comment\">\t * StringUtils.hasLength(&quot;&quot;) = false</span></span><br><span class=\"line\"><span class=\"comment\">\t * StringUtils.hasLength(&quot; &quot;) = true</span></span><br><span class=\"line\"><span class=\"comment\">\t * StringUtils.hasLength(&quot;Hello&quot;) = true</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str the &#123;<span class=\"doctag\">@code</span> CharSequence&#125; to check (may be &#123;<span class=\"doctag\">@code</span> null&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if the &#123;<span class=\"doctag\">@code</span> CharSequence&#125; is not &#123;<span class=\"doctag\">@code</span> null&#125; and has length</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> #hasText(String)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasLength</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> CharSequence str)</span> &#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (str != <span class=\"literal\">null</span> &amp;&amp; str.length() &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>亲自实践</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.javadocdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类 &#123;<span class=\"doctag\">@code</span> OrderService&#125; 订单服务层.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt; 主要包括 创建订单、取消订单、查询订单等功能更</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> Order</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> &lt;a href=&quot;mailto:lerryli@foxmail.com&quot;&gt;Lerry Li&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2019/05/06</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrderService</span> &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 默认数量 &#123;<span class=\"doctag\">@value</span>&#125; */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">QUANTITY</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建订单.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt; 创建订单需要传用户id和商品列表(商品id和商品数量).</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;pre&gt;&#123;<span class=\"doctag\">@code</span></span></span><br><span class=\"line\"><span class=\"comment\">     *  演示如何使用该方法</span></span><br><span class=\"line\"><span class=\"comment\">     *  List&lt;Goods&gt; items = new ArrayList&lt;&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">     *  Goods goods = new Goods(1L, BigDecimal.ONE);</span></span><br><span class=\"line\"><span class=\"comment\">     *  Goods goods2 = new Goods(2L, BigDecimal.TEN);</span></span><br><span class=\"line\"><span class=\"comment\">     *  items.add(goods);</span></span><br><span class=\"line\"><span class=\"comment\">     *  items.add(goods2);</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *  Order order1 = new Order();</span></span><br><span class=\"line\"><span class=\"comment\">     *  order.setUserId(&quot;1&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">     *  order.setItems(items);</span></span><br><span class=\"line\"><span class=\"comment\">     *  OrderService#createOrder(order);</span></span><br><span class=\"line\"><span class=\"comment\">     * &#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> order 订单信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> NullPointerException 参数信息为空</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@exception</span> IllegalArgumentException  数量不合法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 是否创建成功</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> Order</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">createOrder</span><span class=\"params\">(Order order)</span> <span class=\"keyword\">throws</span> IllegalArgumentException&#123; </span><br><span class=\"line\">        Objects.requireNonNull(order);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Goods&gt; items = order.getItems();</span><br><span class=\"line\">        items.forEach(goods -&gt; &#123; </span><br><span class=\"line\">            <span class=\"type\">BigDecimal</span> <span class=\"variable\">quantity</span> <span class=\"operator\">=</span> goods.getQuantity();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (quantity &lt;span style=<span class=\"string\">&quot;font-weight: bold;&quot;</span> class=<span class=\"string\">&quot;mark&quot;</span>&gt; <span class=\"literal\">null</span> || BigDecimal.ZERO.compareTo(quantity) &lt;/span&gt; <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;create order...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成JavaDoc\"><a href=\"#生成JavaDoc\" class=\"headerlink\" title=\"生成JavaDoc\"></a>生成JavaDoc</h3><p>通过IDEA生成Javadoc： Tools –&gt; Generate JavaDoc<br>注意要配置编码，如果不配置则生成的JavaDoc会乱码，还需要配置Output directory<br>​<img src=\"http://127.0.0.1:6806/assets/20190506232720436-20231024140302-7qr2y3q.png\" alt=\"Generate JavaDoc\"><br>​<img src=\"http://127.0.0.1:6806/assets/20190506234058735-20231024140302-29lw0lj.png\" alt=\"参数配置\"><br>这里有几点要特别注意一下：</p>\n<ol>\n<li>IDEA 的 JavaDoc 生成功能在菜单 Tools-&gt;Generate JavaDoc 项里面。</li>\n<li>点击上述菜单项后，会出现生成 JavaDoc 的对话框，一般的选项都很直观，不必细说。但是要注意生成 JavaDoc 的源代码对象的选择，一般以模块（Module）为主，必要时可以单独选择必要的 Java 源代码文件，不推荐以 Project 为 JavaDoc 生成的源范围。</li>\n<li>里面有一个 Locale 可选填项，表示的是需要生成的 JavaDoc 以何种语言版本展示，根据 javadoc.exe 的帮助说明，这其实对应的就是 javadoc.exe 的 -locale 参数，如果不填，默认可能是英文或者是当前操作系统的语言，既然是国人，建议在此填写 zh_CN，这样生成的 JavaDoc 就是中文版本的，当然指的是 JavaDoc 的框架中各种通用的固定显示区域都是中文的。你自己编写的注释转换的内容还是根据你注释的内容来。</li>\n<li>还有一个“Other command line arguments:”可选填项，非常重要，是填写直接向 javadoc.exe 传递的参数内容。因为有一些重要的设置，只能通过直接参数形式向 javadoc.exe 传递。这里必须要填写如下参数：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-encoding UTF-8 -charset UTF-8 -windowtitle &quot;JavaDoc使用详解&quot; -link https://docs.oracle.com/javase/8/docs/api</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>第一个参数 -encoding UTF-8 表示你的源代码（含有符合 JavaDoc 标准的注释）是基于 UTF-8 编码的，以免处理过程中出现中文等非英语字符乱码；第二个参数 -charset UTF-8 表示在处理并生成 JavaDoc 超文本时使用的字符集也是以 UTF-8 为编码，目前所有浏览器都支持 UTF-8，这样最具有通用性，支持中文非常好；第三个参数 -windowtitle 表示生成的 JavaDoc 超文本在浏览器中打开时，浏览器窗口标题栏显示的文字内容；第四个参数 -link 很重要，它表示你生成的 JavaDoc 中涉及到很多对其他外部 Java 类的引用，是使用全限定名称还是带有超链接的短名称，举个例子，我创建了一个方法 public void func(String arg)，这个方法在生成 JavaDoc 时如果不指定 -link 参数，则 JavaDoc 中对该方法的表述就会自动变为 public void func(java.lang.String arg)，因为 String 这个类对我自己实现的类来讲就是外部引用的类，虽然它是 Java 标准库的类。如果指定了 -link <a href=\"https://docs.oracle.com/javase/8/docs/api/\">https://docs.oracle.com/javase/8/docs/api/</a> 参数，则 javadoc.exe 在生成 JavaDoc 时，会使用 String 这样的短名称而非全限定名称 java.lang.String，同时自动为 String 短名称生成一个超链接，指向官方 JavaSE 标准文档 <a href=\"https://docs.oracle.com/javase/8/docs/api/\">https://docs.oracle.com/javase/8/docs/api/</a> 中对 String 类的详细文档地址。-link 实质上是告诉 javadoc.exe 根据提供的外部引用类的 JavaDoc 地址去找一个叫 package-list 的文本文件，在这个文本文件中包含了所有外部引用类的全限定名称，因此生成的新 JavaDoc 不必使用外部引用类的全限定名，只需要使用短名称，同时可以自动创建指向其外部引用 JavaDoc 中的详细文档超链接。每个 JavaDoc 都会在根目录下有一个 package-list 文件，包括我们自己生成的 JavaDoc。</li>\n</ol>\n<h3 id=\"查看成果\"><a href=\"#查看成果\" class=\"headerlink\" title=\"查看成果\"></a>查看成果</h3><p>配置完毕后点击<code>OK</code>​按钮,console看到如下日志输出则说明JavaDoc生成成功<br>​<img src=\"http://127.0.0.1:6806/assets/20190506235158770-20231024140302-5ci4h2j.png\" alt=\"生成JavaDoc\"><br>JavaDoc 生成完毕，即可在其根目录下找到 index.html 文件，打开它就可以看到我们自己的标准 JavaDoc API 文档啦。<br>​<img src=\"http://127.0.0.1:6806/assets/201905062353345-20231024140302-m70gtbv.png\" alt=\"生成后的JavaDoc\"><br>​<img src=\"http://127.0.0.1:6806/assets/20190506235431735-20231024140302-5cmeeml.png\" alt=\"类结构\"><br>​<img src=\"http://127.0.0.1:6806/assets/20190506235511278-20231024140302-29qmwak.png\" alt=\"方法资料\">​</p>\n<hr>\n<p>​<img src=\"http://127.0.0.1:6806/assets/20180623202835803-20231024140302-s4rfuzd.png\">​</p>\n"},{"title":"2. 内存分配","_content":"\n# 2. 内存分配\n\n# 内存模型\n\n**C++ 内存分区模型：**代码区、全局区、栈区、堆区。\n**代码区：**\n\n- 存储 CPU 执行的机器指令（二进制代码），由操作系统管理。\n- 存储在可执行文件中，运行后加载到内存。\n- 代码区是共享的，对于频繁被执行的程序，只需要在内存中有一份代码即可。\n- 代码区是只读的，防止指令被意外修改。\n\n**全局区：**\n\n- 存放全局变量、静态变量和字符串常量。\n- 程序结束后，由操作系统释放。\n\n**栈区：**\n\n- 由编译器自动释放，存储函数中的参数值、局部变量等。\n- 注意：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放。\n\n**堆区：**\n\n- 由程序员分配和释放，如果没释放，则在程序结束后，由操作系统回收。\n- C++ 主要利用 new 在堆区开辟内存。\n\n# new 关键字\n\n在堆区开辟内存：\n\n```cpp\nnew 数据类型(值);\t\t// 返回该内存的指针\n```\n\n释放内存：\n\n```cpp\ndelete 变量;\t\t\t// 释放变量存储的地址\n```\n\n使用 new 创建数组：\n\n```cpp\nnew 数据类型[长度];\t\t// 申请一片连续空间，返回首地址\n```\n\n创建数组并初始化：\n\n```cpp\nnew 数据类型[长度]{元素1, 元素2, ...};\n```\n\n释放数组：\n\n```cpp\ndelete[] 变量;\n```\n","source":"_posts/C++笔记.md/2. 内存分配.md","raw":"---\ntitle: 2. 内存分配\n---\n\n# 2. 内存分配\n\n# 内存模型\n\n**C++ 内存分区模型：**代码区、全局区、栈区、堆区。\n**代码区：**\n\n- 存储 CPU 执行的机器指令（二进制代码），由操作系统管理。\n- 存储在可执行文件中，运行后加载到内存。\n- 代码区是共享的，对于频繁被执行的程序，只需要在内存中有一份代码即可。\n- 代码区是只读的，防止指令被意外修改。\n\n**全局区：**\n\n- 存放全局变量、静态变量和字符串常量。\n- 程序结束后，由操作系统释放。\n\n**栈区：**\n\n- 由编译器自动释放，存储函数中的参数值、局部变量等。\n- 注意：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放。\n\n**堆区：**\n\n- 由程序员分配和释放，如果没释放，则在程序结束后，由操作系统回收。\n- C++ 主要利用 new 在堆区开辟内存。\n\n# new 关键字\n\n在堆区开辟内存：\n\n```cpp\nnew 数据类型(值);\t\t// 返回该内存的指针\n```\n\n释放内存：\n\n```cpp\ndelete 变量;\t\t\t// 释放变量存储的地址\n```\n\n使用 new 创建数组：\n\n```cpp\nnew 数据类型[长度];\t\t// 申请一片连续空间，返回首地址\n```\n\n创建数组并初始化：\n\n```cpp\nnew 数据类型[长度]{元素1, 元素2, ...};\n```\n\n释放数组：\n\n```cpp\ndelete[] 变量;\n```\n","slug":"C++笔记.md/2. 内存分配","published":1,"date":"2023-10-24T13:25:26.065Z","updated":"2023-10-24T15:48:45.983Z","_id":"clo4d0zaa00008orafg6afvo1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2-内存分配\"><a href=\"#2-内存分配\" class=\"headerlink\" title=\"2. 内存分配\"></a>2. 内存分配</h1><h1 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h1><p><strong>C++ 内存分区模型：</strong>代码区、全局区、栈区、堆区。<br><strong>代码区：</strong></p>\n<ul>\n<li>存储 CPU 执行的机器指令（二进制代码），由操作系统管理。</li>\n<li>存储在可执行文件中，运行后加载到内存。</li>\n<li>代码区是共享的，对于频繁被执行的程序，只需要在内存中有一份代码即可。</li>\n<li>代码区是只读的，防止指令被意外修改。</li>\n</ul>\n<p><strong>全局区：</strong></p>\n<ul>\n<li>存放全局变量、静态变量和字符串常量。</li>\n<li>程序结束后，由操作系统释放。</li>\n</ul>\n<p><strong>栈区：</strong></p>\n<ul>\n<li>由编译器自动释放，存储函数中的参数值、局部变量等。</li>\n<li>注意：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放。</li>\n</ul>\n<p><strong>堆区：</strong></p>\n<ul>\n<li>由程序员分配和释放，如果没释放，则在程序结束后，由操作系统回收。</li>\n<li>C++ 主要利用 new 在堆区开辟内存。</li>\n</ul>\n<h1 id=\"new-关键字\"><a href=\"#new-关键字\" class=\"headerlink\" title=\"new 关键字\"></a>new 关键字</h1><p>在堆区开辟内存：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> 数据类型(值);\t\t<span class=\"comment\">// 返回该内存的指针</span></span><br></pre></td></tr></table></figure>\n\n<p>释放内存：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> 变量;\t\t\t<span class=\"comment\">// 释放变量存储的地址</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 new 创建数组：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> 数据类型[长度];\t\t<span class=\"comment\">// 申请一片连续空间，返回首地址</span></span><br></pre></td></tr></table></figure>\n\n<p>创建数组并初始化：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> 数据类型[长度]&#123;元素<span class=\"number\">1</span>, 元素<span class=\"number\">2</span>, ...&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>释放数组：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span>[] 变量;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"2-内存分配\"><a href=\"#2-内存分配\" class=\"headerlink\" title=\"2. 内存分配\"></a>2. 内存分配</h1><h1 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h1><p><strong>C++ 内存分区模型：</strong>代码区、全局区、栈区、堆区。<br><strong>代码区：</strong></p>\n<ul>\n<li>存储 CPU 执行的机器指令（二进制代码），由操作系统管理。</li>\n<li>存储在可执行文件中，运行后加载到内存。</li>\n<li>代码区是共享的，对于频繁被执行的程序，只需要在内存中有一份代码即可。</li>\n<li>代码区是只读的，防止指令被意外修改。</li>\n</ul>\n<p><strong>全局区：</strong></p>\n<ul>\n<li>存放全局变量、静态变量和字符串常量。</li>\n<li>程序结束后，由操作系统释放。</li>\n</ul>\n<p><strong>栈区：</strong></p>\n<ul>\n<li>由编译器自动释放，存储函数中的参数值、局部变量等。</li>\n<li>注意：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放。</li>\n</ul>\n<p><strong>堆区：</strong></p>\n<ul>\n<li>由程序员分配和释放，如果没释放，则在程序结束后，由操作系统回收。</li>\n<li>C++ 主要利用 new 在堆区开辟内存。</li>\n</ul>\n<h1 id=\"new-关键字\"><a href=\"#new-关键字\" class=\"headerlink\" title=\"new 关键字\"></a>new 关键字</h1><p>在堆区开辟内存：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> 数据类型(值);\t\t<span class=\"comment\">// 返回该内存的指针</span></span><br></pre></td></tr></table></figure>\n\n<p>释放内存：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> 变量;\t\t\t<span class=\"comment\">// 释放变量存储的地址</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 new 创建数组：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> 数据类型[长度];\t\t<span class=\"comment\">// 申请一片连续空间，返回首地址</span></span><br></pre></td></tr></table></figure>\n\n<p>创建数组并初始化：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> 数据类型[长度]&#123;元素<span class=\"number\">1</span>, 元素<span class=\"number\">2</span>, ...&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>释放数组：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span>[] 变量;</span><br></pre></td></tr></table></figure>\n"},{"_content":"# 1. 基础语法\n\n* 📄 [1.1. 基本语法](siyuan://blocks/20231023235515-f95ttwx)\n* 📄 [1.2. 字符串](siyuan://blocks/20231023235701-wga5o3k)\n* 📄 [1.3. 指针和引用](siyuan://blocks/20231023235632-qpmuxru)\n* 📄 [1.4. 文件](siyuan://blocks/20231023235739-fe88uec)\n\n‍\n","source":"_posts/C++笔记.md/1. 基础语法.md","raw":"# 1. 基础语法\n\n* 📄 [1.1. 基本语法](siyuan://blocks/20231023235515-f95ttwx)\n* 📄 [1.2. 字符串](siyuan://blocks/20231023235701-wga5o3k)\n* 📄 [1.3. 指针和引用](siyuan://blocks/20231023235632-qpmuxru)\n* 📄 [1.4. 文件](siyuan://blocks/20231023235739-fe88uec)\n\n‍\n","slug":"C++笔记.md/1. 基础语法","published":1,"date":"2023-10-24T13:25:26.064Z","updated":"2023-10-24T13:25:04.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clo4d0zah00018ora7wzchhvr","content":"<h1 id=\"1-基础语法\"><a href=\"#1-基础语法\" class=\"headerlink\" title=\"1. 基础语法\"></a>1. 基础语法</h1><ul>\n<li>📄 <a href=\"siyuan://blocks/20231023235515-f95ttwx\">1.1. 基本语法</a></li>\n<li>📄 <a href=\"siyuan://blocks/20231023235701-wga5o3k\">1.2. 字符串</a></li>\n<li>📄 <a href=\"siyuan://blocks/20231023235632-qpmuxru\">1.3. 指针和引用</a></li>\n<li>📄 <a href=\"siyuan://blocks/20231023235739-fe88uec\">1.4. 文件</a></li>\n</ul>\n<p>‍</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"1-基础语法\"><a href=\"#1-基础语法\" class=\"headerlink\" title=\"1. 基础语法\"></a>1. 基础语法</h1><ul>\n<li>📄 <a href=\"siyuan://blocks/20231023235515-f95ttwx\">1.1. 基本语法</a></li>\n<li>📄 <a href=\"siyuan://blocks/20231023235701-wga5o3k\">1.2. 字符串</a></li>\n<li>📄 <a href=\"siyuan://blocks/20231023235632-qpmuxru\">1.3. 指针和引用</a></li>\n<li>📄 <a href=\"siyuan://blocks/20231023235739-fe88uec\">1.4. 文件</a></li>\n</ul>\n<p>‍</p>\n"},{"title":"4. 容器","_content":"\n# 4. 容器\n\n# array\n\n> 头文件：#include <array>\n\n使用 array 模板类创建：\n\n```c\narray<数据类型, 长度> 变量名 = {xx, xx, xx};\n```\n\narray 和数组的对比：\n\n- array 和数组一样，可以通过下标取值。\n- array 可以整体赋值（值拷贝）：`数组1 = 数组2`\n- array 是一个对象，可以调用方法。\n\n相关方法：\n\n```c\n.size()\t\t\t// 获取长度\n.fill(value)\t// 使用相同的值填充数组\t\n```\n\n# vector\n\nvector 是一个动态长度的数组。\n\n> 头文件：#include <vector>\n\n定义方式：\n\n```c\nvector<数据类型> 变量名;\t\t// 创建一个空容器\n\n// 指定元素内容\nvector<数据类型> 变量名 =  {1, 2, 3};\nvector<数据类型> 变量名 {1, 2, 3};\n\n// 通过构造函数初定义\nvector<数据类型> 变量名(length);\t\t\t\t// 指定元素个数（默认全为 0）\nvector<数据类型> 变量名(length, default)\t\t// 指定元素个数和默认值\nvector<数据类型> 变量名(对象);\t\t\t\t// 拷贝另一个 vecotr 对象的值\n```\n\n取值：\n\n```c\n变量[index]\n```\n\n相关方法：\n\n```c\n.size()\t\t\t// 获取元素个数\n.at(index)\t\t// 获取指定位置的元素\n    \n.push_back()\t// 在末尾添加元素\n.pop_back()\t\t// 删除末尾元素\n.clear()\t\t// 清空容器\n.empty()\t\t// 判断是否为空\n```\n\nvector 对比 list：\n\n- vector 底层是动态数组，list 底层是双链表。\n- vector 的访问速度更快。\n\n# pair 对组\n\n创建对组：\n\n```cpp\npair<数据类型, 数据类型> 变量名(value1, value2);\n\npari<数据类型, 数据类型> 变量名 = make_pair(value1, value2);\n```\n\n相关操作：\n\n```cpp\n.first\t\t\t// 获取第一个元素\n.second\t\t\t// 获取第二个元素\n```\n\n# map\n\n> 头文件：#include <map>\n\n关于 map：\n\n- map 中的所有元素都是 pair。\n- map 通过 key 获取 value。\n- map 中的所有元素按键值自动排序。\n- 底层通过二叉树实现。\n\n创建 map：\n\n```cpp\nmap<数据类型, 数据类型> 变量;\n\nmap<string, string> myMap = {\n\t{\"name\", \"root\"},\n\t{\"pwd\", \"root\"}\n}\n```\n\n插入 key：\n\n```cpp\n变量[key] = value;\n.insert(pair<type, type>(value1, value2))\t\t// 插入一个 pair\n.insert(make_pair(key, value))\t\t\t\t\t// 插入一个 pair\n```\n\n相关方法：\n\n```cpp\n.insert(value)\t\t\t// 插入值\n[key]\t\t\t\t\t// 通过 key 获取 value\n.at(key)\t\t\t\t// 通过 key 获取 value\n.size()\t\t\t\t\t// 获取大小\n.empty()\t\t\t\t// 判断是否为空\n.clear()\t\t\t\t// 清空容器\n.erase(key)\t\t\t\t// 通过 key 删除元素\n.count(key)\t\t\t\t// 统计出现次数（判断 key 是否存在）\n.find(key)\t\t\t\t// 查找元素，返回迭代器，不存在返回.end()\n```\n\n判断元素是否存在：\n\n```cpp\nif (myMap.count(\"apple\") > 0) {\n    // 元素存在\n} else {\n    // 元素不存在\n}\n\n```\n\n查找元素：\n\n```cpp\nauto iter = myMap.find(\"banana\");  // 查找指定键的元素\nif (iter != myMap.end()) {\n    // 找到了元素\n    int value = iter->second;  // 获取值\n} else {\n    // 未找到元素\n}\n```\n\n# unordered_map\n\nunordered 对比 map：\n\n- 底层：unordered 底层基于哈希表，map 底层基于红黑树。\n- 排序：map 会对 key 进行排序，unordered_map 是无序的。\n- 查找效率：unordered_map（哈希表）的查找效率为常数级，map（红黑树）的查找效率为对数级。\n- 内存消耗：为了维持红黑树的结构，map 比 unordered_map 占用的内存更多。\n- 稳定性：unordered_map 的迭代器在插入、删除元素后可能会失效，map 则能保持稳定。\n\n创建 unordered_map：\n\n```cpp\nunordered_map<数据类型, 数据类型> 变量;\n```\n\n插入元素：\n\n```cpp\n变量[key] = value;\n```\n\n# 迭代器\n\n创建迭代器类型的变量：\n\n```cpp\nvector<int>::iterator it;\n```\n\n获取迭代器的开始位置：\n\n```cpp\n容器.begin()\n```\n\n获取迭代器的结束位置：\n\n```cpp\n容器.end()\n```\n\n移动迭代器：\n\n```cpp\nit++;\n```\n\n获取当前元素：\n\n```cpp\n*it;\n```\n\n使用迭代器遍历：\n\n```cpp\nfor (vector<int>::iterator it - vec.begin(); it != vec.end(); i++) {\n    cout << * it;\n}\n```\n","source":"_posts/C++笔记.md/4. 容器.md","raw":"---\ntitle: 4. 容器\n---\n\n# 4. 容器\n\n# array\n\n> 头文件：#include <array>\n\n使用 array 模板类创建：\n\n```c\narray<数据类型, 长度> 变量名 = {xx, xx, xx};\n```\n\narray 和数组的对比：\n\n- array 和数组一样，可以通过下标取值。\n- array 可以整体赋值（值拷贝）：`数组1 = 数组2`\n- array 是一个对象，可以调用方法。\n\n相关方法：\n\n```c\n.size()\t\t\t// 获取长度\n.fill(value)\t// 使用相同的值填充数组\t\n```\n\n# vector\n\nvector 是一个动态长度的数组。\n\n> 头文件：#include <vector>\n\n定义方式：\n\n```c\nvector<数据类型> 变量名;\t\t// 创建一个空容器\n\n// 指定元素内容\nvector<数据类型> 变量名 =  {1, 2, 3};\nvector<数据类型> 变量名 {1, 2, 3};\n\n// 通过构造函数初定义\nvector<数据类型> 变量名(length);\t\t\t\t// 指定元素个数（默认全为 0）\nvector<数据类型> 变量名(length, default)\t\t// 指定元素个数和默认值\nvector<数据类型> 变量名(对象);\t\t\t\t// 拷贝另一个 vecotr 对象的值\n```\n\n取值：\n\n```c\n变量[index]\n```\n\n相关方法：\n\n```c\n.size()\t\t\t// 获取元素个数\n.at(index)\t\t// 获取指定位置的元素\n    \n.push_back()\t// 在末尾添加元素\n.pop_back()\t\t// 删除末尾元素\n.clear()\t\t// 清空容器\n.empty()\t\t// 判断是否为空\n```\n\nvector 对比 list：\n\n- vector 底层是动态数组，list 底层是双链表。\n- vector 的访问速度更快。\n\n# pair 对组\n\n创建对组：\n\n```cpp\npair<数据类型, 数据类型> 变量名(value1, value2);\n\npari<数据类型, 数据类型> 变量名 = make_pair(value1, value2);\n```\n\n相关操作：\n\n```cpp\n.first\t\t\t// 获取第一个元素\n.second\t\t\t// 获取第二个元素\n```\n\n# map\n\n> 头文件：#include <map>\n\n关于 map：\n\n- map 中的所有元素都是 pair。\n- map 通过 key 获取 value。\n- map 中的所有元素按键值自动排序。\n- 底层通过二叉树实现。\n\n创建 map：\n\n```cpp\nmap<数据类型, 数据类型> 变量;\n\nmap<string, string> myMap = {\n\t{\"name\", \"root\"},\n\t{\"pwd\", \"root\"}\n}\n```\n\n插入 key：\n\n```cpp\n变量[key] = value;\n.insert(pair<type, type>(value1, value2))\t\t// 插入一个 pair\n.insert(make_pair(key, value))\t\t\t\t\t// 插入一个 pair\n```\n\n相关方法：\n\n```cpp\n.insert(value)\t\t\t// 插入值\n[key]\t\t\t\t\t// 通过 key 获取 value\n.at(key)\t\t\t\t// 通过 key 获取 value\n.size()\t\t\t\t\t// 获取大小\n.empty()\t\t\t\t// 判断是否为空\n.clear()\t\t\t\t// 清空容器\n.erase(key)\t\t\t\t// 通过 key 删除元素\n.count(key)\t\t\t\t// 统计出现次数（判断 key 是否存在）\n.find(key)\t\t\t\t// 查找元素，返回迭代器，不存在返回.end()\n```\n\n判断元素是否存在：\n\n```cpp\nif (myMap.count(\"apple\") > 0) {\n    // 元素存在\n} else {\n    // 元素不存在\n}\n\n```\n\n查找元素：\n\n```cpp\nauto iter = myMap.find(\"banana\");  // 查找指定键的元素\nif (iter != myMap.end()) {\n    // 找到了元素\n    int value = iter->second;  // 获取值\n} else {\n    // 未找到元素\n}\n```\n\n# unordered_map\n\nunordered 对比 map：\n\n- 底层：unordered 底层基于哈希表，map 底层基于红黑树。\n- 排序：map 会对 key 进行排序，unordered_map 是无序的。\n- 查找效率：unordered_map（哈希表）的查找效率为常数级，map（红黑树）的查找效率为对数级。\n- 内存消耗：为了维持红黑树的结构，map 比 unordered_map 占用的内存更多。\n- 稳定性：unordered_map 的迭代器在插入、删除元素后可能会失效，map 则能保持稳定。\n\n创建 unordered_map：\n\n```cpp\nunordered_map<数据类型, 数据类型> 变量;\n```\n\n插入元素：\n\n```cpp\n变量[key] = value;\n```\n\n# 迭代器\n\n创建迭代器类型的变量：\n\n```cpp\nvector<int>::iterator it;\n```\n\n获取迭代器的开始位置：\n\n```cpp\n容器.begin()\n```\n\n获取迭代器的结束位置：\n\n```cpp\n容器.end()\n```\n\n移动迭代器：\n\n```cpp\nit++;\n```\n\n获取当前元素：\n\n```cpp\n*it;\n```\n\n使用迭代器遍历：\n\n```cpp\nfor (vector<int>::iterator it - vec.begin(); it != vec.end(); i++) {\n    cout << * it;\n}\n```\n","slug":"C++笔记.md/4. 容器","published":1,"date":"2023-10-24T13:25:26.066Z","updated":"2023-10-24T15:49:11.448Z","_id":"clo4d0zak00028ora19f19h1c","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"4-容器\"><a href=\"#4-容器\" class=\"headerlink\" title=\"4. 容器\"></a>4. 容器</h1><h1 id=\"array\"><a href=\"#array\" class=\"headerlink\" title=\"array\"></a>array</h1><blockquote>\n<p>头文件：#include <array></p>\n</blockquote>\n<p>使用 array 模板类创建：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">array</span>&lt;数据类型, 长度&gt; 变量名 = &#123;xx, xx, xx&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>array 和数组的对比：</p>\n<ul>\n<li>array 和数组一样，可以通过下标取值。</li>\n<li>array 可以整体赋值（值拷贝）：<code>数组1 = 数组2</code></li>\n<li>array 是一个对象，可以调用方法。</li>\n</ul>\n<p>相关方法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.size()\t\t\t<span class=\"comment\">// 获取长度</span></span><br><span class=\"line\">.fill(value)\t<span class=\"comment\">// 使用相同的值填充数组\t</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector\"></a>vector</h1><p>vector 是一个动态长度的数组。</p>\n<blockquote>\n<p>头文件：#include <vector></p>\n</blockquote>\n<p>定义方式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;数据类型&gt; 变量名;\t\t<span class=\"comment\">// 创建一个空容器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定元素内容</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;数据类型&gt; 变量名 =  &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;数据类型&gt; 变量名 &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过构造函数初定义</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;数据类型&gt; 变量名(length);\t\t\t\t<span class=\"comment\">// 指定元素个数（默认全为 0）</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;数据类型&gt; 变量名(length, <span class=\"keyword\">default</span>)\t\t<span class=\"comment\">// 指定元素个数和默认值</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;数据类型&gt; 变量名(对象);\t\t\t\t<span class=\"comment\">// 拷贝另一个 vecotr 对象的值</span></span><br></pre></td></tr></table></figure>\n\n<p>取值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量[index]</span><br></pre></td></tr></table></figure>\n\n<p>相关方法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.size()\t\t\t<span class=\"comment\">// 获取元素个数</span></span><br><span class=\"line\">.at(index)\t\t<span class=\"comment\">// 获取指定位置的元素</span></span><br><span class=\"line\">    </span><br><span class=\"line\">.push_back()\t<span class=\"comment\">// 在末尾添加元素</span></span><br><span class=\"line\">.pop_back()\t\t<span class=\"comment\">// 删除末尾元素</span></span><br><span class=\"line\">.clear()\t\t<span class=\"comment\">// 清空容器</span></span><br><span class=\"line\">.empty()\t\t<span class=\"comment\">// 判断是否为空</span></span><br></pre></td></tr></table></figure>\n\n<p>vector 对比 list：</p>\n<ul>\n<li>vector 底层是动态数组，list 底层是双链表。</li>\n<li>vector 的访问速度更快。</li>\n</ul>\n<h1 id=\"pair-对组\"><a href=\"#pair-对组\" class=\"headerlink\" title=\"pair 对组\"></a>pair 对组</h1><p>创建对组：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pair&lt;数据类型, 数据类型&gt; 变量名(value1, value2);</span><br><span class=\"line\"></span><br><span class=\"line\">pari&lt;数据类型, 数据类型&gt; 变量名 = <span class=\"built_in\">make_pair</span>(value1, value2);</span><br></pre></td></tr></table></figure>\n\n<p>相关操作：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.first\t\t\t<span class=\"comment\">// 获取第一个元素</span></span><br><span class=\"line\">.second\t\t\t<span class=\"comment\">// 获取第二个元素</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h1><blockquote>\n<p>头文件：#include <map></p>\n</blockquote>\n<p>关于 map：</p>\n<ul>\n<li>map 中的所有元素都是 pair。</li>\n<li>map 通过 key 获取 value。</li>\n<li>map 中的所有元素按键值自动排序。</li>\n<li>底层通过二叉树实现。</li>\n</ul>\n<p>创建 map：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map&lt;数据类型, 数据类型&gt; 变量;</span><br><span class=\"line\"></span><br><span class=\"line\">map&lt;string, string&gt; myMap = &#123;</span><br><span class=\"line\">\t&#123;<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;root&quot;</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"string\">&quot;pwd&quot;</span>, <span class=\"string\">&quot;root&quot;</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>插入 key：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量[key] = value;</span><br><span class=\"line\">.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;type, type&gt;(value1, value2))\t\t<span class=\"comment\">// 插入一个 pair</span></span><br><span class=\"line\">.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(key, value))\t\t\t\t\t<span class=\"comment\">// 插入一个 pair</span></span><br></pre></td></tr></table></figure>\n\n<p>相关方法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"built_in\">insert</span>(value)\t\t\t<span class=\"comment\">// 插入值</span></span><br><span class=\"line\">[key]\t\t\t\t\t<span class=\"comment\">// 通过 key 获取 value</span></span><br><span class=\"line\">.<span class=\"built_in\">at</span>(key)\t\t\t\t<span class=\"comment\">// 通过 key 获取 value</span></span><br><span class=\"line\">.<span class=\"built_in\">size</span>()\t\t\t\t\t<span class=\"comment\">// 获取大小</span></span><br><span class=\"line\">.<span class=\"built_in\">empty</span>()\t\t\t\t<span class=\"comment\">// 判断是否为空</span></span><br><span class=\"line\">.<span class=\"built_in\">clear</span>()\t\t\t\t<span class=\"comment\">// 清空容器</span></span><br><span class=\"line\">.<span class=\"built_in\">erase</span>(key)\t\t\t\t<span class=\"comment\">// 通过 key 删除元素</span></span><br><span class=\"line\">.<span class=\"built_in\">count</span>(key)\t\t\t\t<span class=\"comment\">// 统计出现次数（判断 key 是否存在）</span></span><br><span class=\"line\">.<span class=\"built_in\">find</span>(key)\t\t\t\t<span class=\"comment\">// 查找元素，返回迭代器，不存在返回.end()</span></span><br></pre></td></tr></table></figure>\n\n<p>判断元素是否存在：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (myMap.<span class=\"built_in\">count</span>(<span class=\"string\">&quot;apple&quot;</span>) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 元素存在</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 元素不存在</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>查找元素：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> iter = myMap.<span class=\"built_in\">find</span>(<span class=\"string\">&quot;banana&quot;</span>);  <span class=\"comment\">// 查找指定键的元素</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (iter != myMap.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 找到了元素</span></span><br><span class=\"line\">    <span class=\"type\">int</span> value = iter-&gt;second;  <span class=\"comment\">// 获取值</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 未找到元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"unordered-map\"><a href=\"#unordered-map\" class=\"headerlink\" title=\"unordered_map\"></a>unordered_map</h1><p>unordered 对比 map：</p>\n<ul>\n<li>底层：unordered 底层基于哈希表，map 底层基于红黑树。</li>\n<li>排序：map 会对 key 进行排序，unordered_map 是无序的。</li>\n<li>查找效率：unordered_map（哈希表）的查找效率为常数级，map（红黑树）的查找效率为对数级。</li>\n<li>内存消耗：为了维持红黑树的结构，map 比 unordered_map 占用的内存更多。</li>\n<li>稳定性：unordered_map 的迭代器在插入、删除元素后可能会失效，map 则能保持稳定。</li>\n</ul>\n<p>创建 unordered_map：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unordered_map&lt;数据类型, 数据类型&gt; 变量;</span><br></pre></td></tr></table></figure>\n\n<p>插入元素：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量[key] = value;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h1><p>创建迭代器类型的变量：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;::iterator it;</span><br></pre></td></tr></table></figure>\n\n<p>获取迭代器的开始位置：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">容器.<span class=\"built_in\">begin</span>()</span><br></pre></td></tr></table></figure>\n\n<p>获取迭代器的结束位置：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">容器.<span class=\"built_in\">end</span>()</span><br></pre></td></tr></table></figure>\n\n<p>移动迭代器：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it++;</span><br></pre></td></tr></table></figure>\n\n<p>获取当前元素：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*it;</span><br></pre></td></tr></table></figure>\n\n<p>使用迭代器遍历：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (vector&lt;<span class=\"type\">int</span>&gt;::iterator it - vec.<span class=\"built_in\">begin</span>(); it != vec.<span class=\"built_in\">end</span>(); i++) &#123;</span><br><span class=\"line\">    cout &lt;&lt; * it;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"4-容器\"><a href=\"#4-容器\" class=\"headerlink\" title=\"4. 容器\"></a>4. 容器</h1><h1 id=\"array\"><a href=\"#array\" class=\"headerlink\" title=\"array\"></a>array</h1><blockquote>\n<p>头文件：#include <array></p>\n</blockquote>\n<p>使用 array 模板类创建：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">array</span>&lt;数据类型, 长度&gt; 变量名 = &#123;xx, xx, xx&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>array 和数组的对比：</p>\n<ul>\n<li>array 和数组一样，可以通过下标取值。</li>\n<li>array 可以整体赋值（值拷贝）：<code>数组1 = 数组2</code></li>\n<li>array 是一个对象，可以调用方法。</li>\n</ul>\n<p>相关方法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.size()\t\t\t<span class=\"comment\">// 获取长度</span></span><br><span class=\"line\">.fill(value)\t<span class=\"comment\">// 使用相同的值填充数组\t</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector\"></a>vector</h1><p>vector 是一个动态长度的数组。</p>\n<blockquote>\n<p>头文件：#include <vector></p>\n</blockquote>\n<p>定义方式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;数据类型&gt; 变量名;\t\t<span class=\"comment\">// 创建一个空容器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定元素内容</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;数据类型&gt; 变量名 =  &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;数据类型&gt; 变量名 &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过构造函数初定义</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;数据类型&gt; 变量名(length);\t\t\t\t<span class=\"comment\">// 指定元素个数（默认全为 0）</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;数据类型&gt; 变量名(length, <span class=\"keyword\">default</span>)\t\t<span class=\"comment\">// 指定元素个数和默认值</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;数据类型&gt; 变量名(对象);\t\t\t\t<span class=\"comment\">// 拷贝另一个 vecotr 对象的值</span></span><br></pre></td></tr></table></figure>\n\n<p>取值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量[index]</span><br></pre></td></tr></table></figure>\n\n<p>相关方法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.size()\t\t\t<span class=\"comment\">// 获取元素个数</span></span><br><span class=\"line\">.at(index)\t\t<span class=\"comment\">// 获取指定位置的元素</span></span><br><span class=\"line\">    </span><br><span class=\"line\">.push_back()\t<span class=\"comment\">// 在末尾添加元素</span></span><br><span class=\"line\">.pop_back()\t\t<span class=\"comment\">// 删除末尾元素</span></span><br><span class=\"line\">.clear()\t\t<span class=\"comment\">// 清空容器</span></span><br><span class=\"line\">.empty()\t\t<span class=\"comment\">// 判断是否为空</span></span><br></pre></td></tr></table></figure>\n\n<p>vector 对比 list：</p>\n<ul>\n<li>vector 底层是动态数组，list 底层是双链表。</li>\n<li>vector 的访问速度更快。</li>\n</ul>\n<h1 id=\"pair-对组\"><a href=\"#pair-对组\" class=\"headerlink\" title=\"pair 对组\"></a>pair 对组</h1><p>创建对组：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pair&lt;数据类型, 数据类型&gt; 变量名(value1, value2);</span><br><span class=\"line\"></span><br><span class=\"line\">pari&lt;数据类型, 数据类型&gt; 变量名 = <span class=\"built_in\">make_pair</span>(value1, value2);</span><br></pre></td></tr></table></figure>\n\n<p>相关操作：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.first\t\t\t<span class=\"comment\">// 获取第一个元素</span></span><br><span class=\"line\">.second\t\t\t<span class=\"comment\">// 获取第二个元素</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h1><blockquote>\n<p>头文件：#include <map></p>\n</blockquote>\n<p>关于 map：</p>\n<ul>\n<li>map 中的所有元素都是 pair。</li>\n<li>map 通过 key 获取 value。</li>\n<li>map 中的所有元素按键值自动排序。</li>\n<li>底层通过二叉树实现。</li>\n</ul>\n<p>创建 map：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map&lt;数据类型, 数据类型&gt; 变量;</span><br><span class=\"line\"></span><br><span class=\"line\">map&lt;string, string&gt; myMap = &#123;</span><br><span class=\"line\">\t&#123;<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;root&quot;</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"string\">&quot;pwd&quot;</span>, <span class=\"string\">&quot;root&quot;</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>插入 key：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量[key] = value;</span><br><span class=\"line\">.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;type, type&gt;(value1, value2))\t\t<span class=\"comment\">// 插入一个 pair</span></span><br><span class=\"line\">.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(key, value))\t\t\t\t\t<span class=\"comment\">// 插入一个 pair</span></span><br></pre></td></tr></table></figure>\n\n<p>相关方法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"built_in\">insert</span>(value)\t\t\t<span class=\"comment\">// 插入值</span></span><br><span class=\"line\">[key]\t\t\t\t\t<span class=\"comment\">// 通过 key 获取 value</span></span><br><span class=\"line\">.<span class=\"built_in\">at</span>(key)\t\t\t\t<span class=\"comment\">// 通过 key 获取 value</span></span><br><span class=\"line\">.<span class=\"built_in\">size</span>()\t\t\t\t\t<span class=\"comment\">// 获取大小</span></span><br><span class=\"line\">.<span class=\"built_in\">empty</span>()\t\t\t\t<span class=\"comment\">// 判断是否为空</span></span><br><span class=\"line\">.<span class=\"built_in\">clear</span>()\t\t\t\t<span class=\"comment\">// 清空容器</span></span><br><span class=\"line\">.<span class=\"built_in\">erase</span>(key)\t\t\t\t<span class=\"comment\">// 通过 key 删除元素</span></span><br><span class=\"line\">.<span class=\"built_in\">count</span>(key)\t\t\t\t<span class=\"comment\">// 统计出现次数（判断 key 是否存在）</span></span><br><span class=\"line\">.<span class=\"built_in\">find</span>(key)\t\t\t\t<span class=\"comment\">// 查找元素，返回迭代器，不存在返回.end()</span></span><br></pre></td></tr></table></figure>\n\n<p>判断元素是否存在：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (myMap.<span class=\"built_in\">count</span>(<span class=\"string\">&quot;apple&quot;</span>) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 元素存在</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 元素不存在</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>查找元素：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> iter = myMap.<span class=\"built_in\">find</span>(<span class=\"string\">&quot;banana&quot;</span>);  <span class=\"comment\">// 查找指定键的元素</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (iter != myMap.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 找到了元素</span></span><br><span class=\"line\">    <span class=\"type\">int</span> value = iter-&gt;second;  <span class=\"comment\">// 获取值</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 未找到元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"unordered-map\"><a href=\"#unordered-map\" class=\"headerlink\" title=\"unordered_map\"></a>unordered_map</h1><p>unordered 对比 map：</p>\n<ul>\n<li>底层：unordered 底层基于哈希表，map 底层基于红黑树。</li>\n<li>排序：map 会对 key 进行排序，unordered_map 是无序的。</li>\n<li>查找效率：unordered_map（哈希表）的查找效率为常数级，map（红黑树）的查找效率为对数级。</li>\n<li>内存消耗：为了维持红黑树的结构，map 比 unordered_map 占用的内存更多。</li>\n<li>稳定性：unordered_map 的迭代器在插入、删除元素后可能会失效，map 则能保持稳定。</li>\n</ul>\n<p>创建 unordered_map：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unordered_map&lt;数据类型, 数据类型&gt; 变量;</span><br></pre></td></tr></table></figure>\n\n<p>插入元素：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量[key] = value;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h1><p>创建迭代器类型的变量：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;::iterator it;</span><br></pre></td></tr></table></figure>\n\n<p>获取迭代器的开始位置：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">容器.<span class=\"built_in\">begin</span>()</span><br></pre></td></tr></table></figure>\n\n<p>获取迭代器的结束位置：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">容器.<span class=\"built_in\">end</span>()</span><br></pre></td></tr></table></figure>\n\n<p>移动迭代器：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it++;</span><br></pre></td></tr></table></figure>\n\n<p>获取当前元素：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*it;</span><br></pre></td></tr></table></figure>\n\n<p>使用迭代器遍历：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (vector&lt;<span class=\"type\">int</span>&gt;::iterator it - vec.<span class=\"built_in\">begin</span>(); it != vec.<span class=\"built_in\">end</span>(); i++) &#123;</span><br><span class=\"line\">    cout &lt;&lt; * it;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"3. 面向对象","_content":"\n# 3. 面向对象\n\n# 面向对象\n\n类是对象的模板，对象是类的实例。\n\n## 类的定义\n\n定义类相关：\n\n- 没有访问修饰符，默认为 private。\n- 注意：类的定义需要加分号。\n- 访问修饰符：public、private、protected\n\n构造函数：\n\n- 默认有一个无参构造，定义有参构造后，无参构造就会被覆盖。\n\n定义类：\n\n```cpp\nclass 类名 {\n\t数据类型 属性 = 值;\n\t[访问修饰符]:\n    \t数据类型 属性 = 值;\t\t\t\t// 定义属性\n    \t返回类型 方法名() { ... }\t\t// 定义方法\n\t\t// 定义有参构造函数\n    \t类名(数据类型 变量名) {\n            this -> 属性 = 变量名;\n        }\t\t\t\t\t\t\n};\n```\n\n## 实例化对象\n\n创建对象：\n\n```cpp\n类名 变量;\t\t\t\t// 调用无参构造\n类名 变量(参数列表);\t\t// 调用有参构造\n```\n\n使用对象：\n\n```cpp\n变量.属性 = 值;\n变量.方法()\n```\n\n## 继承\n\n与 Java 不同，C++ 可以继承多个类。\n\n```cpp\nclass 类名 : public 父类1, public 父类2 {\n\t...\n};\n```\n\n## 多态\n\n子类可以重写继承自父类的方法。\n","source":"_posts/C++笔记.md/3. 面向对象.md","raw":"---\ntitle: 3. 面向对象\n---\n\n# 3. 面向对象\n\n# 面向对象\n\n类是对象的模板，对象是类的实例。\n\n## 类的定义\n\n定义类相关：\n\n- 没有访问修饰符，默认为 private。\n- 注意：类的定义需要加分号。\n- 访问修饰符：public、private、protected\n\n构造函数：\n\n- 默认有一个无参构造，定义有参构造后，无参构造就会被覆盖。\n\n定义类：\n\n```cpp\nclass 类名 {\n\t数据类型 属性 = 值;\n\t[访问修饰符]:\n    \t数据类型 属性 = 值;\t\t\t\t// 定义属性\n    \t返回类型 方法名() { ... }\t\t// 定义方法\n\t\t// 定义有参构造函数\n    \t类名(数据类型 变量名) {\n            this -> 属性 = 变量名;\n        }\t\t\t\t\t\t\n};\n```\n\n## 实例化对象\n\n创建对象：\n\n```cpp\n类名 变量;\t\t\t\t// 调用无参构造\n类名 变量(参数列表);\t\t// 调用有参构造\n```\n\n使用对象：\n\n```cpp\n变量.属性 = 值;\n变量.方法()\n```\n\n## 继承\n\n与 Java 不同，C++ 可以继承多个类。\n\n```cpp\nclass 类名 : public 父类1, public 父类2 {\n\t...\n};\n```\n\n## 多态\n\n子类可以重写继承自父类的方法。\n","slug":"C++笔记.md/3. 面向对象","published":1,"date":"2023-10-24T13:25:26.066Z","updated":"2023-10-24T15:48:55.079Z","_id":"clo4d0zam00038orag8tmffez","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"3-面向对象\"><a href=\"#3-面向对象\" class=\"headerlink\" title=\"3. 面向对象\"></a>3. 面向对象</h1><h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><p>类是对象的模板，对象是类的实例。</p>\n<h2 id=\"类的定义\"><a href=\"#类的定义\" class=\"headerlink\" title=\"类的定义\"></a>类的定义</h2><p>定义类相关：</p>\n<ul>\n<li>没有访问修饰符，默认为 private。</li>\n<li>注意：类的定义需要加分号。</li>\n<li>访问修饰符：public、private、protected</li>\n</ul>\n<p>构造函数：</p>\n<ul>\n<li>默认有一个无参构造，定义有参构造后，无参构造就会被覆盖。</li>\n</ul>\n<p>定义类：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> 类名 &#123;</span><br><span class=\"line\">\t数据类型 属性 = 值;</span><br><span class=\"line\">\t[访问修饰符]:</span><br><span class=\"line\">    \t数据类型 属性 = 值;\t\t\t\t<span class=\"comment\">// 定义属性</span></span><br><span class=\"line\">    \t返回类型 方法名() &#123; ... &#125;\t\t<span class=\"comment\">// 定义方法</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 定义有参构造函数</span></span><br><span class=\"line\">    \t类名(数据类型 变量名) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span> -&gt; 属性 = 变量名;</span><br><span class=\"line\">        &#125;\t\t\t\t\t\t</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实例化对象\"><a href=\"#实例化对象\" class=\"headerlink\" title=\"实例化对象\"></a>实例化对象</h2><p>创建对象：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类名 变量;\t\t\t\t<span class=\"comment\">// 调用无参构造</span></span><br><span class=\"line\">类名 变量(参数列表);\t\t<span class=\"comment\">// 调用有参构造</span></span><br></pre></td></tr></table></figure>\n\n<p>使用对象：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量.属性 = 值;</span><br><span class=\"line\">变量.方法()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>与 Java 不同，C++ 可以继承多个类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> 类名 : <span class=\"keyword\">public</span> 父类<span class=\"number\">1</span>, <span class=\"keyword\">public</span> 父类<span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><p>子类可以重写继承自父类的方法。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"3-面向对象\"><a href=\"#3-面向对象\" class=\"headerlink\" title=\"3. 面向对象\"></a>3. 面向对象</h1><h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><p>类是对象的模板，对象是类的实例。</p>\n<h2 id=\"类的定义\"><a href=\"#类的定义\" class=\"headerlink\" title=\"类的定义\"></a>类的定义</h2><p>定义类相关：</p>\n<ul>\n<li>没有访问修饰符，默认为 private。</li>\n<li>注意：类的定义需要加分号。</li>\n<li>访问修饰符：public、private、protected</li>\n</ul>\n<p>构造函数：</p>\n<ul>\n<li>默认有一个无参构造，定义有参构造后，无参构造就会被覆盖。</li>\n</ul>\n<p>定义类：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> 类名 &#123;</span><br><span class=\"line\">\t数据类型 属性 = 值;</span><br><span class=\"line\">\t[访问修饰符]:</span><br><span class=\"line\">    \t数据类型 属性 = 值;\t\t\t\t<span class=\"comment\">// 定义属性</span></span><br><span class=\"line\">    \t返回类型 方法名() &#123; ... &#125;\t\t<span class=\"comment\">// 定义方法</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 定义有参构造函数</span></span><br><span class=\"line\">    \t类名(数据类型 变量名) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span> -&gt; 属性 = 变量名;</span><br><span class=\"line\">        &#125;\t\t\t\t\t\t</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实例化对象\"><a href=\"#实例化对象\" class=\"headerlink\" title=\"实例化对象\"></a>实例化对象</h2><p>创建对象：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类名 变量;\t\t\t\t<span class=\"comment\">// 调用无参构造</span></span><br><span class=\"line\">类名 变量(参数列表);\t\t<span class=\"comment\">// 调用有参构造</span></span><br></pre></td></tr></table></figure>\n\n<p>使用对象：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量.属性 = 值;</span><br><span class=\"line\">变量.方法()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>与 Java 不同，C++ 可以继承多个类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> 类名 : <span class=\"keyword\">public</span> 父类<span class=\"number\">1</span>, <span class=\"keyword\">public</span> 父类<span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><p>子类可以重写继承自父类的方法。</p>\n"},{"title":"5. 模板","_content":"\n# 5. 模板\n\n泛型编程是 C++ 的编程思想之一，其主要的技术就是模板。\n模板的分类：函数模板、类模板。\n\n# 函数模板\n\n定义函数模板：\n\n- template：声明模板\n- typename：定义类型参数，也可以用 class 代替。\n\n```cpp\ntemplate<typename T>\n函数声明或定义\n```\n","source":"_posts/C++笔记.md/5. 模板.md","raw":"---\ntitle: 5. 模板\n---\n\n# 5. 模板\n\n泛型编程是 C++ 的编程思想之一，其主要的技术就是模板。\n模板的分类：函数模板、类模板。\n\n# 函数模板\n\n定义函数模板：\n\n- template：声明模板\n- typename：定义类型参数，也可以用 class 代替。\n\n```cpp\ntemplate<typename T>\n函数声明或定义\n```\n","slug":"C++笔记.md/5. 模板","published":1,"date":"2023-10-24T13:25:26.067Z","updated":"2023-10-24T15:49:25.524Z","_id":"clo4d0zan00048ora3dru8oin","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"5-模板\"><a href=\"#5-模板\" class=\"headerlink\" title=\"5. 模板\"></a>5. 模板</h1><p>泛型编程是 C++ 的编程思想之一，其主要的技术就是模板。<br>模板的分类：函数模板、类模板。</p>\n<h1 id=\"函数模板\"><a href=\"#函数模板\" class=\"headerlink\" title=\"函数模板\"></a>函数模板</h1><p>定义函数模板：</p>\n<ul>\n<li>template：声明模板</li>\n<li>typename：定义类型参数，也可以用 class 代替。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">函数声明或定义</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"5-模板\"><a href=\"#5-模板\" class=\"headerlink\" title=\"5. 模板\"></a>5. 模板</h1><p>泛型编程是 C++ 的编程思想之一，其主要的技术就是模板。<br>模板的分类：函数模板、类模板。</p>\n<h1 id=\"函数模板\"><a href=\"#函数模板\" class=\"headerlink\" title=\"函数模板\"></a>函数模板</h1><p>定义函数模板：</p>\n<ul>\n<li>template：声明模板</li>\n<li>typename：定义类型参数，也可以用 class 代替。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">函数声明或定义</span><br></pre></td></tr></table></figure>\n"},{"title":"正则表达式","_content":"\n# 正则表达式\n\n> 头文件：#include <regex>\n\n创建正则对象：\n\n```cpp\nregex 变量名(\"正则\");\n```\n\n相关函数：\n\n```cpp\nregex_search(str, 正则对象)\t\t// 是否查找成功\nregex_match(str, 正则对象)\t\t// 是否完全匹配\nsregex_iterator\n```\n\n## 获取结果\n\nsmatch 对象：\n\n```cpp\nsmatch result;\nregex_search(str, result, reg);\n```\n\n对象方法：\n\n```cpp\n.empty()\t\t// 是否为空\n.size()\t\t\t// 获取数量\n.str()\t\t\t// 获取字符串\n.str(int)\t\t// 获取第几个字符串\n```\n\n全局匹配（使用迭代器）：\n\n```cpp\nsregex_iterator iter(str.begin(), str.end(), reg);\nsregex_iterator end;\n\nwhile (iter != end) {\n    iter++;\n}\n```\n","source":"_posts/C++笔记.md/正则表达式.md","raw":"---\ntitle: 正则表达式\n---\n\n# 正则表达式\n\n> 头文件：#include <regex>\n\n创建正则对象：\n\n```cpp\nregex 变量名(\"正则\");\n```\n\n相关函数：\n\n```cpp\nregex_search(str, 正则对象)\t\t// 是否查找成功\nregex_match(str, 正则对象)\t\t// 是否完全匹配\nsregex_iterator\n```\n\n## 获取结果\n\nsmatch 对象：\n\n```cpp\nsmatch result;\nregex_search(str, result, reg);\n```\n\n对象方法：\n\n```cpp\n.empty()\t\t// 是否为空\n.size()\t\t\t// 获取数量\n.str()\t\t\t// 获取字符串\n.str(int)\t\t// 获取第几个字符串\n```\n\n全局匹配（使用迭代器）：\n\n```cpp\nsregex_iterator iter(str.begin(), str.end(), reg);\nsregex_iterator end;\n\nwhile (iter != end) {\n    iter++;\n}\n```\n","slug":"C++笔记.md/正则表达式","published":1,"date":"2023-10-24T13:25:26.068Z","updated":"2023-10-24T15:49:35.592Z","_id":"clo4d0zao00058oraar671i84","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h1><blockquote>\n<p>头文件：#include <regex></p>\n</blockquote>\n<p>创建正则对象：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex 变量名(<span class=\"string\">&quot;正则&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>相关函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">regex_search</span>(str, 正则对象)\t\t<span class=\"comment\">// 是否查找成功</span></span><br><span class=\"line\"><span class=\"built_in\">regex_match</span>(str, 正则对象)\t\t<span class=\"comment\">// 是否完全匹配</span></span><br><span class=\"line\">sregex_iterator</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取结果\"><a href=\"#获取结果\" class=\"headerlink\" title=\"获取结果\"></a>获取结果</h2><p>smatch 对象：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smatch result;</span><br><span class=\"line\"><span class=\"built_in\">regex_search</span>(str, result, reg);</span><br></pre></td></tr></table></figure>\n\n<p>对象方法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"built_in\">empty</span>()\t\t<span class=\"comment\">// 是否为空</span></span><br><span class=\"line\">.<span class=\"built_in\">size</span>()\t\t\t<span class=\"comment\">// 获取数量</span></span><br><span class=\"line\">.<span class=\"built_in\">str</span>()\t\t\t<span class=\"comment\">// 获取字符串</span></span><br><span class=\"line\">.<span class=\"built_in\">str</span>(<span class=\"type\">int</span>)\t\t<span class=\"comment\">// 获取第几个字符串</span></span><br></pre></td></tr></table></figure>\n\n<p>全局匹配（使用迭代器）：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">sregex_iterator <span class=\"title\">iter</span><span class=\"params\">(str.begin(), str.end(), reg)</span></span>;</span><br><span class=\"line\">sregex_iterator end;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (iter != end) &#123;</span><br><span class=\"line\">    iter++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h1><blockquote>\n<p>头文件：#include <regex></p>\n</blockquote>\n<p>创建正则对象：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex 变量名(<span class=\"string\">&quot;正则&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>相关函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">regex_search</span>(str, 正则对象)\t\t<span class=\"comment\">// 是否查找成功</span></span><br><span class=\"line\"><span class=\"built_in\">regex_match</span>(str, 正则对象)\t\t<span class=\"comment\">// 是否完全匹配</span></span><br><span class=\"line\">sregex_iterator</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取结果\"><a href=\"#获取结果\" class=\"headerlink\" title=\"获取结果\"></a>获取结果</h2><p>smatch 对象：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smatch result;</span><br><span class=\"line\"><span class=\"built_in\">regex_search</span>(str, result, reg);</span><br></pre></td></tr></table></figure>\n\n<p>对象方法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"built_in\">empty</span>()\t\t<span class=\"comment\">// 是否为空</span></span><br><span class=\"line\">.<span class=\"built_in\">size</span>()\t\t\t<span class=\"comment\">// 获取数量</span></span><br><span class=\"line\">.<span class=\"built_in\">str</span>()\t\t\t<span class=\"comment\">// 获取字符串</span></span><br><span class=\"line\">.<span class=\"built_in\">str</span>(<span class=\"type\">int</span>)\t\t<span class=\"comment\">// 获取第几个字符串</span></span><br></pre></td></tr></table></figure>\n\n<p>全局匹配（使用迭代器）：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">sregex_iterator <span class=\"title\">iter</span><span class=\"params\">(str.begin(), str.end(), reg)</span></span>;</span><br><span class=\"line\">sregex_iterator end;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (iter != end) &#123;</span><br><span class=\"line\">    iter++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"# 1.3. 指针和引用\n\n# 指针\n\n作用：\n\n1. 指针可以保存内存地址的编号。\n2. 通过指针可以间接访问内存。\n\n定义指针变量：\n\n```c\n数据类型 *变量名;\n```\n\n运算符：\n\n- `&`：取地址\n- `*`：取值（解引用）\n\n**指针变量的占用空间**：\n\n- 在 32 位操作系统下，占 4 字节。\n- 在 64 位操作系统下，占 8 字节。\n- 指针的占用空间与数据类型无关，与系统位数有关。\n\n**指针变量的初始化：**\n\n- 空指针：存储编号为 0 的地址，空指针无法被访问。\n- 初始化为空指针（NULL 表示 0）：\n\n```c\nint *p = NULL;\n```\n\n- 野指针：存储的内存地址，不是当前程序申请的。\n\n# 引用\n\n**引用的介绍：**\n\n- 引用是变量的别名，必须和一个变量进行绑定。\n- 引用变量和原变量，访问同一块内存。\n- 引用变量在操作上就等价于原变量\n\n**引用和指针的对比：**\n\n- 指针存储地址，需要进行取值运算。引用直接和原变量绑定，可以直接修改原变量。\n- 指针可以为空，引用不可以，必须绑定一个变量。\n- 引用的本质是一个指针常量，自动进行解引用操作。\n\n**创建引用：**\n\n- 引用必须要初始化，一旦初始化，就不能更换引用。\n\n```cpp\n数据类型 &别名 = 变量名;\n```\n\n**修饰引用：**\n\n```cpp\n别名 = 值;\n```\n\n## 函数中的引用\n\n**引用类型的形参：**\n\n- 在函数中，引用的形参可以当做实参使用，操作比指针更简单。\n\n```cpp\n// 引用实现交换两个变量的值\nvoid swap(int &num1, int &num2) {\n\tint temp;\n\ttemp = num1;\n\tnum1 = num2;\n\tnum2 = temp;\n}\n```\n\n**返回引用类型：**\n\n- 不能返回局部变量的引用，因为离开函数后，局部变量将被销毁。\n\n## 常量引用\n\n- 常量通常用作形参，防止通过形参修改到实参。\n- 使用常量引用相比值传递，消耗的空间更少。\n\n```c\nvoid show(const string &msg) { ... }\n```\n","source":"_posts/C++笔记.md/1. 基础语法/1.3. 指针和引用.md","raw":"# 1.3. 指针和引用\n\n# 指针\n\n作用：\n\n1. 指针可以保存内存地址的编号。\n2. 通过指针可以间接访问内存。\n\n定义指针变量：\n\n```c\n数据类型 *变量名;\n```\n\n运算符：\n\n- `&`：取地址\n- `*`：取值（解引用）\n\n**指针变量的占用空间**：\n\n- 在 32 位操作系统下，占 4 字节。\n- 在 64 位操作系统下，占 8 字节。\n- 指针的占用空间与数据类型无关，与系统位数有关。\n\n**指针变量的初始化：**\n\n- 空指针：存储编号为 0 的地址，空指针无法被访问。\n- 初始化为空指针（NULL 表示 0）：\n\n```c\nint *p = NULL;\n```\n\n- 野指针：存储的内存地址，不是当前程序申请的。\n\n# 引用\n\n**引用的介绍：**\n\n- 引用是变量的别名，必须和一个变量进行绑定。\n- 引用变量和原变量，访问同一块内存。\n- 引用变量在操作上就等价于原变量\n\n**引用和指针的对比：**\n\n- 指针存储地址，需要进行取值运算。引用直接和原变量绑定，可以直接修改原变量。\n- 指针可以为空，引用不可以，必须绑定一个变量。\n- 引用的本质是一个指针常量，自动进行解引用操作。\n\n**创建引用：**\n\n- 引用必须要初始化，一旦初始化，就不能更换引用。\n\n```cpp\n数据类型 &别名 = 变量名;\n```\n\n**修饰引用：**\n\n```cpp\n别名 = 值;\n```\n\n## 函数中的引用\n\n**引用类型的形参：**\n\n- 在函数中，引用的形参可以当做实参使用，操作比指针更简单。\n\n```cpp\n// 引用实现交换两个变量的值\nvoid swap(int &num1, int &num2) {\n\tint temp;\n\ttemp = num1;\n\tnum1 = num2;\n\tnum2 = temp;\n}\n```\n\n**返回引用类型：**\n\n- 不能返回局部变量的引用，因为离开函数后，局部变量将被销毁。\n\n## 常量引用\n\n- 常量通常用作形参，防止通过形参修改到实参。\n- 使用常量引用相比值传递，消耗的空间更少。\n\n```c\nvoid show(const string &msg) { ... }\n```\n","slug":"C++笔记.md/1. 基础语法/1.3. 指针和引用","published":1,"date":"2023-10-24T13:25:26.063Z","updated":"2023-10-24T13:25:04.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clo4d0zao00068ora3m84elx0","content":"<h1 id=\"1-3-指针和引用\"><a href=\"#1-3-指针和引用\" class=\"headerlink\" title=\"1.3. 指针和引用\"></a>1.3. 指针和引用</h1><h1 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h1><p>作用：</p>\n<ol>\n<li>指针可以保存内存地址的编号。</li>\n<li>通过指针可以间接访问内存。</li>\n</ol>\n<p>定义指针变量：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型 *变量名;</span><br></pre></td></tr></table></figure>\n\n<p>运算符：</p>\n<ul>\n<li><code>&amp;</code>：取地址</li>\n<li><code>*</code>：取值（解引用）</li>\n</ul>\n<p><strong>指针变量的占用空间</strong>：</p>\n<ul>\n<li>在 32 位操作系统下，占 4 字节。</li>\n<li>在 64 位操作系统下，占 8 字节。</li>\n<li>指针的占用空间与数据类型无关，与系统位数有关。</li>\n</ul>\n<p><strong>指针变量的初始化：</strong></p>\n<ul>\n<li>空指针：存储编号为 0 的地址，空指针无法被访问。</li>\n<li>初始化为空指针（NULL 表示 0）：</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> *p = <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>野指针：存储的内存地址，不是当前程序申请的。</li>\n</ul>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><p><strong>引用的介绍：</strong></p>\n<ul>\n<li>引用是变量的别名，必须和一个变量进行绑定。</li>\n<li>引用变量和原变量，访问同一块内存。</li>\n<li>引用变量在操作上就等价于原变量</li>\n</ul>\n<p><strong>引用和指针的对比：</strong></p>\n<ul>\n<li>指针存储地址，需要进行取值运算。引用直接和原变量绑定，可以直接修改原变量。</li>\n<li>指针可以为空，引用不可以，必须绑定一个变量。</li>\n<li>引用的本质是一个指针常量，自动进行解引用操作。</li>\n</ul>\n<p><strong>创建引用：</strong></p>\n<ul>\n<li>引用必须要初始化，一旦初始化，就不能更换引用。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型 &amp;别名 = 变量名;</span><br></pre></td></tr></table></figure>\n\n<p><strong>修饰引用：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">别名 = 值;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数中的引用\"><a href=\"#函数中的引用\" class=\"headerlink\" title=\"函数中的引用\"></a>函数中的引用</h2><p><strong>引用类型的形参：</strong></p>\n<ul>\n<li>在函数中，引用的形参可以当做实参使用，操作比指针更简单。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用实现交换两个变量的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"type\">int</span> &amp;num1, <span class=\"type\">int</span> &amp;num2)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp;</span><br><span class=\"line\">\ttemp = num1;</span><br><span class=\"line\">\tnum1 = num2;</span><br><span class=\"line\">\tnum2 = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>返回引用类型：</strong></p>\n<ul>\n<li>不能返回局部变量的引用，因为离开函数后，局部变量将被销毁。</li>\n</ul>\n<h2 id=\"常量引用\"><a href=\"#常量引用\" class=\"headerlink\" title=\"常量引用\"></a>常量引用</h2><ul>\n<li>常量通常用作形参，防止通过形参修改到实参。</li>\n<li>使用常量引用相比值传递，消耗的空间更少。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">show</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"built_in\">string</span> &amp;msg)</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"1-3-指针和引用\"><a href=\"#1-3-指针和引用\" class=\"headerlink\" title=\"1.3. 指针和引用\"></a>1.3. 指针和引用</h1><h1 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h1><p>作用：</p>\n<ol>\n<li>指针可以保存内存地址的编号。</li>\n<li>通过指针可以间接访问内存。</li>\n</ol>\n<p>定义指针变量：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型 *变量名;</span><br></pre></td></tr></table></figure>\n\n<p>运算符：</p>\n<ul>\n<li><code>&amp;</code>：取地址</li>\n<li><code>*</code>：取值（解引用）</li>\n</ul>\n<p><strong>指针变量的占用空间</strong>：</p>\n<ul>\n<li>在 32 位操作系统下，占 4 字节。</li>\n<li>在 64 位操作系统下，占 8 字节。</li>\n<li>指针的占用空间与数据类型无关，与系统位数有关。</li>\n</ul>\n<p><strong>指针变量的初始化：</strong></p>\n<ul>\n<li>空指针：存储编号为 0 的地址，空指针无法被访问。</li>\n<li>初始化为空指针（NULL 表示 0）：</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> *p = <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>野指针：存储的内存地址，不是当前程序申请的。</li>\n</ul>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><p><strong>引用的介绍：</strong></p>\n<ul>\n<li>引用是变量的别名，必须和一个变量进行绑定。</li>\n<li>引用变量和原变量，访问同一块内存。</li>\n<li>引用变量在操作上就等价于原变量</li>\n</ul>\n<p><strong>引用和指针的对比：</strong></p>\n<ul>\n<li>指针存储地址，需要进行取值运算。引用直接和原变量绑定，可以直接修改原变量。</li>\n<li>指针可以为空，引用不可以，必须绑定一个变量。</li>\n<li>引用的本质是一个指针常量，自动进行解引用操作。</li>\n</ul>\n<p><strong>创建引用：</strong></p>\n<ul>\n<li>引用必须要初始化，一旦初始化，就不能更换引用。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型 &amp;别名 = 变量名;</span><br></pre></td></tr></table></figure>\n\n<p><strong>修饰引用：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">别名 = 值;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数中的引用\"><a href=\"#函数中的引用\" class=\"headerlink\" title=\"函数中的引用\"></a>函数中的引用</h2><p><strong>引用类型的形参：</strong></p>\n<ul>\n<li>在函数中，引用的形参可以当做实参使用，操作比指针更简单。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用实现交换两个变量的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"type\">int</span> &amp;num1, <span class=\"type\">int</span> &amp;num2)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp;</span><br><span class=\"line\">\ttemp = num1;</span><br><span class=\"line\">\tnum1 = num2;</span><br><span class=\"line\">\tnum2 = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>返回引用类型：</strong></p>\n<ul>\n<li>不能返回局部变量的引用，因为离开函数后，局部变量将被销毁。</li>\n</ul>\n<h2 id=\"常量引用\"><a href=\"#常量引用\" class=\"headerlink\" title=\"常量引用\"></a>常量引用</h2><ul>\n<li>常量通常用作形参，防止通过形参修改到实参。</li>\n<li>使用常量引用相比值传递，消耗的空间更少。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">show</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"built_in\">string</span> &amp;msg)</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"# 1.2. 字符串\n\n# 创建字符串\n\n> 头文件：#include <string>\n\n- C++ 的字符串以 std::string 对象的形式存在。\n- string 本质上是一个 vector<char>，支持扩容和 vector 的相关方法。\n\n为什么可以直接使用 string：\n\n- 在 iostream 中有引入 string 类型，所以引入 iostream 后就能直接使用。\n- 为了完整地使用 string 的功能，建议引入 string 的头文件。\n\n**创建 string：**\n\n```c\nstring str;\t\t\t\t// 空字符串\nstring str = \"hello\";\t// 通过赋值初始化\nstring str(\"hello\");\t// 使用构造器初始化\nstring str = str2;\t\t// 复制另一个 string 的值\n```\n\n**字符串比较：**\n\n- 字符串可以使用 `<`、`>`、`==`、`<=`、`>=` 进行比较。\n- 比大小：按字典顺序比较。\n\n**索引操作：**\n\n- 可以通过索引取单个字符，以及修改字符串。\n\n```cpp\n变量[index] = 'H'\n```\n\n# 字符串拼接\n\n**加号拼接：**\n\n- 格式：`字符串对象1 + 字符串对象2`\n- 两个字符串对象相加，会产生一个新的字符串对象。\n- 两个字符串字面量无法相加，必须有一个字符串对象。\n\n**.append() 方法**\n\n- 格式：`变量.append(\"str\")`\n- append 会修改原字符串。\n\n# 字符串方法\n\n追加 char：`+=`、`push_back()`\n\n```cpp\n.length()\t\t\t\t// 获取长度\n.size()\t\t\t\t\t// 获取长度\n.empty()\t\t\t\t// 检查是否为空\n\n.clear()\t\t\t\t// 清空字符串\n.append(string)\t\t\t// 追加字符串\n.insert(pos, str)\t\t// 插入字符串\n.replace(pos, count, str)\t\t// 替换字符串（指定开始位置和长度）\n.find(str, pos)\t\t\t// 查找字符串\n.compare(str)\t\t\t// 判断字符串是否相等\n.substr(pos, count)\t\t// 截取字符串\n.find(str)\t\t\t\t// 查找子串，返回下标（失败返回 std::string::npos）\n.find(str, pos)\t\t\t// 指定起始位置查找\n.rfind(str, pos)\t\t// 反向查找\n```\n","source":"_posts/C++笔记.md/1. 基础语法/1.2. 字符串.md","raw":"# 1.2. 字符串\n\n# 创建字符串\n\n> 头文件：#include <string>\n\n- C++ 的字符串以 std::string 对象的形式存在。\n- string 本质上是一个 vector<char>，支持扩容和 vector 的相关方法。\n\n为什么可以直接使用 string：\n\n- 在 iostream 中有引入 string 类型，所以引入 iostream 后就能直接使用。\n- 为了完整地使用 string 的功能，建议引入 string 的头文件。\n\n**创建 string：**\n\n```c\nstring str;\t\t\t\t// 空字符串\nstring str = \"hello\";\t// 通过赋值初始化\nstring str(\"hello\");\t// 使用构造器初始化\nstring str = str2;\t\t// 复制另一个 string 的值\n```\n\n**字符串比较：**\n\n- 字符串可以使用 `<`、`>`、`==`、`<=`、`>=` 进行比较。\n- 比大小：按字典顺序比较。\n\n**索引操作：**\n\n- 可以通过索引取单个字符，以及修改字符串。\n\n```cpp\n变量[index] = 'H'\n```\n\n# 字符串拼接\n\n**加号拼接：**\n\n- 格式：`字符串对象1 + 字符串对象2`\n- 两个字符串对象相加，会产生一个新的字符串对象。\n- 两个字符串字面量无法相加，必须有一个字符串对象。\n\n**.append() 方法**\n\n- 格式：`变量.append(\"str\")`\n- append 会修改原字符串。\n\n# 字符串方法\n\n追加 char：`+=`、`push_back()`\n\n```cpp\n.length()\t\t\t\t// 获取长度\n.size()\t\t\t\t\t// 获取长度\n.empty()\t\t\t\t// 检查是否为空\n\n.clear()\t\t\t\t// 清空字符串\n.append(string)\t\t\t// 追加字符串\n.insert(pos, str)\t\t// 插入字符串\n.replace(pos, count, str)\t\t// 替换字符串（指定开始位置和长度）\n.find(str, pos)\t\t\t// 查找字符串\n.compare(str)\t\t\t// 判断字符串是否相等\n.substr(pos, count)\t\t// 截取字符串\n.find(str)\t\t\t\t// 查找子串，返回下标（失败返回 std::string::npos）\n.find(str, pos)\t\t\t// 指定起始位置查找\n.rfind(str, pos)\t\t// 反向查找\n```\n","slug":"C++笔记.md/1. 基础语法/1.2. 字符串","published":1,"date":"2023-10-24T13:25:26.063Z","updated":"2023-10-24T13:25:04.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clo4d0zap00078ora0hmbbe2e","content":"<h1 id=\"1-2-字符串\"><a href=\"#1-2-字符串\" class=\"headerlink\" title=\"1.2. 字符串\"></a>1.2. 字符串</h1><h1 id=\"创建字符串\"><a href=\"#创建字符串\" class=\"headerlink\" title=\"创建字符串\"></a>创建字符串</h1><blockquote>\n<p>头文件：#include <string></p>\n</blockquote>\n<ul>\n<li>C++ 的字符串以 std::string 对象的形式存在。</li>\n<li>string 本质上是一个 vector<char>，支持扩容和 vector 的相关方法。</li>\n</ul>\n<p>为什么可以直接使用 string：</p>\n<ul>\n<li>在 iostream 中有引入 string 类型，所以引入 iostream 后就能直接使用。</li>\n<li>为了完整地使用 string 的功能，建议引入 string 的头文件。</li>\n</ul>\n<p><strong>创建 string：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str;\t\t\t\t<span class=\"comment\">// 空字符串</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> str = <span class=\"string\">&quot;hello&quot;</span>;\t<span class=\"comment\">// 通过赋值初始化</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> <span class=\"title function_\">str</span><span class=\"params\">(<span class=\"string\">&quot;hello&quot;</span>)</span>;\t<span class=\"comment\">// 使用构造器初始化</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> str = str2;\t\t<span class=\"comment\">// 复制另一个 string 的值</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>字符串比较：</strong></p>\n<ul>\n<li>字符串可以使用 <code>&lt;</code>、<code>&gt;</code>、<code>==</code>、<code>&lt;=</code>、<code>&gt;=</code> 进行比较。</li>\n<li>比大小：按字典顺序比较。</li>\n</ul>\n<p><strong>索引操作：</strong></p>\n<ul>\n<li>可以通过索引取单个字符，以及修改字符串。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量[index] = <span class=\"string\">&#x27;H&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h1><p><strong>加号拼接：</strong></p>\n<ul>\n<li>格式：<code>字符串对象1 + 字符串对象2</code></li>\n<li>两个字符串对象相加，会产生一个新的字符串对象。</li>\n<li>两个字符串字面量无法相加，必须有一个字符串对象。</li>\n</ul>\n<p><strong>.append() 方法</strong></p>\n<ul>\n<li>格式：<code>变量.append(&quot;str&quot;)</code></li>\n<li>append 会修改原字符串。</li>\n</ul>\n<h1 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h1><p>追加 char：<code>+=</code>、<code>push_back()</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"built_in\">length</span>()\t\t\t\t<span class=\"comment\">// 获取长度</span></span><br><span class=\"line\">.<span class=\"built_in\">size</span>()\t\t\t\t\t<span class=\"comment\">// 获取长度</span></span><br><span class=\"line\">.<span class=\"built_in\">empty</span>()\t\t\t\t<span class=\"comment\">// 检查是否为空</span></span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"built_in\">clear</span>()\t\t\t\t<span class=\"comment\">// 清空字符串</span></span><br><span class=\"line\">.<span class=\"built_in\">append</span>(string)\t\t\t<span class=\"comment\">// 追加字符串</span></span><br><span class=\"line\">.<span class=\"built_in\">insert</span>(pos, str)\t\t<span class=\"comment\">// 插入字符串</span></span><br><span class=\"line\">.<span class=\"built_in\">replace</span>(pos, count, str)\t\t<span class=\"comment\">// 替换字符串（指定开始位置和长度）</span></span><br><span class=\"line\">.<span class=\"built_in\">find</span>(str, pos)\t\t\t<span class=\"comment\">// 查找字符串</span></span><br><span class=\"line\">.<span class=\"built_in\">compare</span>(str)\t\t\t<span class=\"comment\">// 判断字符串是否相等</span></span><br><span class=\"line\">.<span class=\"built_in\">substr</span>(pos, count)\t\t<span class=\"comment\">// 截取字符串</span></span><br><span class=\"line\">.<span class=\"built_in\">find</span>(str)\t\t\t\t<span class=\"comment\">// 查找子串，返回下标（失败返回 std::string::npos）</span></span><br><span class=\"line\">.<span class=\"built_in\">find</span>(str, pos)\t\t\t<span class=\"comment\">// 指定起始位置查找</span></span><br><span class=\"line\">.<span class=\"built_in\">rfind</span>(str, pos)\t\t<span class=\"comment\">// 反向查找</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"1-2-字符串\"><a href=\"#1-2-字符串\" class=\"headerlink\" title=\"1.2. 字符串\"></a>1.2. 字符串</h1><h1 id=\"创建字符串\"><a href=\"#创建字符串\" class=\"headerlink\" title=\"创建字符串\"></a>创建字符串</h1><blockquote>\n<p>头文件：#include <string></p>\n</blockquote>\n<ul>\n<li>C++ 的字符串以 std::string 对象的形式存在。</li>\n<li>string 本质上是一个 vector<char>，支持扩容和 vector 的相关方法。</li>\n</ul>\n<p>为什么可以直接使用 string：</p>\n<ul>\n<li>在 iostream 中有引入 string 类型，所以引入 iostream 后就能直接使用。</li>\n<li>为了完整地使用 string 的功能，建议引入 string 的头文件。</li>\n</ul>\n<p><strong>创建 string：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str;\t\t\t\t<span class=\"comment\">// 空字符串</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> str = <span class=\"string\">&quot;hello&quot;</span>;\t<span class=\"comment\">// 通过赋值初始化</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> <span class=\"title function_\">str</span><span class=\"params\">(<span class=\"string\">&quot;hello&quot;</span>)</span>;\t<span class=\"comment\">// 使用构造器初始化</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> str = str2;\t\t<span class=\"comment\">// 复制另一个 string 的值</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>字符串比较：</strong></p>\n<ul>\n<li>字符串可以使用 <code>&lt;</code>、<code>&gt;</code>、<code>==</code>、<code>&lt;=</code>、<code>&gt;=</code> 进行比较。</li>\n<li>比大小：按字典顺序比较。</li>\n</ul>\n<p><strong>索引操作：</strong></p>\n<ul>\n<li>可以通过索引取单个字符，以及修改字符串。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量[index] = <span class=\"string\">&#x27;H&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h1><p><strong>加号拼接：</strong></p>\n<ul>\n<li>格式：<code>字符串对象1 + 字符串对象2</code></li>\n<li>两个字符串对象相加，会产生一个新的字符串对象。</li>\n<li>两个字符串字面量无法相加，必须有一个字符串对象。</li>\n</ul>\n<p><strong>.append() 方法</strong></p>\n<ul>\n<li>格式：<code>变量.append(&quot;str&quot;)</code></li>\n<li>append 会修改原字符串。</li>\n</ul>\n<h1 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h1><p>追加 char：<code>+=</code>、<code>push_back()</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"built_in\">length</span>()\t\t\t\t<span class=\"comment\">// 获取长度</span></span><br><span class=\"line\">.<span class=\"built_in\">size</span>()\t\t\t\t\t<span class=\"comment\">// 获取长度</span></span><br><span class=\"line\">.<span class=\"built_in\">empty</span>()\t\t\t\t<span class=\"comment\">// 检查是否为空</span></span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"built_in\">clear</span>()\t\t\t\t<span class=\"comment\">// 清空字符串</span></span><br><span class=\"line\">.<span class=\"built_in\">append</span>(string)\t\t\t<span class=\"comment\">// 追加字符串</span></span><br><span class=\"line\">.<span class=\"built_in\">insert</span>(pos, str)\t\t<span class=\"comment\">// 插入字符串</span></span><br><span class=\"line\">.<span class=\"built_in\">replace</span>(pos, count, str)\t\t<span class=\"comment\">// 替换字符串（指定开始位置和长度）</span></span><br><span class=\"line\">.<span class=\"built_in\">find</span>(str, pos)\t\t\t<span class=\"comment\">// 查找字符串</span></span><br><span class=\"line\">.<span class=\"built_in\">compare</span>(str)\t\t\t<span class=\"comment\">// 判断字符串是否相等</span></span><br><span class=\"line\">.<span class=\"built_in\">substr</span>(pos, count)\t\t<span class=\"comment\">// 截取字符串</span></span><br><span class=\"line\">.<span class=\"built_in\">find</span>(str)\t\t\t\t<span class=\"comment\">// 查找子串，返回下标（失败返回 std::string::npos）</span></span><br><span class=\"line\">.<span class=\"built_in\">find</span>(str, pos)\t\t\t<span class=\"comment\">// 指定起始位置查找</span></span><br><span class=\"line\">.<span class=\"built_in\">rfind</span>(str, pos)\t\t<span class=\"comment\">// 反向查找</span></span><br></pre></td></tr></table></figure>\n"},{"_content":"# 1.4. 文件\n\n# 文件\n\n写入文件：\n\n```cpp\n#include <fstream>\n\nofstream file(\"test.txt\");\t\t// 创建输出流对象\nfile << \"hello\";\t\t\t\t// 将文本写入文件\nfile.close();\t\t\t\t\t// 关闭文件流\n```\n\n读取文件：\n\n```cpp\n#include <fstream>\n\nstring text;\t\t\t\t\t// 用于存储读取内容\nifstream file(\"test.txt\");\t\t// 创建输入流对象\ngetline(file, text);\t\t\t// 读取一行，并写入变量\nfile.close();\t\t\t\t\t// 关闭文件流\n```\n\n读取多行：\n\n```cpp\n#include <fstream>\n\nstring text;\nifstream file(\"test.txt\");\nwhile(getline(file, text)) {\n    cout << text << endl;\n}\nfile.close();\n```\n","source":"_posts/C++笔记.md/1. 基础语法/1.4. 文件.md","raw":"# 1.4. 文件\n\n# 文件\n\n写入文件：\n\n```cpp\n#include <fstream>\n\nofstream file(\"test.txt\");\t\t// 创建输出流对象\nfile << \"hello\";\t\t\t\t// 将文本写入文件\nfile.close();\t\t\t\t\t// 关闭文件流\n```\n\n读取文件：\n\n```cpp\n#include <fstream>\n\nstring text;\t\t\t\t\t// 用于存储读取内容\nifstream file(\"test.txt\");\t\t// 创建输入流对象\ngetline(file, text);\t\t\t// 读取一行，并写入变量\nfile.close();\t\t\t\t\t// 关闭文件流\n```\n\n读取多行：\n\n```cpp\n#include <fstream>\n\nstring text;\nifstream file(\"test.txt\");\nwhile(getline(file, text)) {\n    cout << text << endl;\n}\nfile.close();\n```\n","slug":"C++笔记.md/1. 基础语法/1.4. 文件","published":1,"date":"2023-10-24T13:25:26.064Z","updated":"2023-10-24T13:25:04.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clo4d0zaq00088ora8h3o732a","content":"<h1 id=\"1-4-文件\"><a href=\"#1-4-文件\" class=\"headerlink\" title=\"1.4. 文件\"></a>1.4. 文件</h1><h1 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h1><p>写入文件：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ofstream <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">&quot;test.txt&quot;</span>)</span></span>;\t\t<span class=\"comment\">// 创建输出流对象</span></span><br><span class=\"line\">file &lt;&lt; <span class=\"string\">&quot;hello&quot;</span>;\t\t\t\t<span class=\"comment\">// 将文本写入文件</span></span><br><span class=\"line\">file.<span class=\"built_in\">close</span>();\t\t\t\t\t<span class=\"comment\">// 关闭文件流</span></span><br></pre></td></tr></table></figure>\n\n<p>读取文件：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">string text;\t\t\t\t\t<span class=\"comment\">// 用于存储读取内容</span></span><br><span class=\"line\"><span class=\"function\">ifstream <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">&quot;test.txt&quot;</span>)</span></span>;\t\t<span class=\"comment\">// 创建输入流对象</span></span><br><span class=\"line\"><span class=\"built_in\">getline</span>(file, text);\t\t\t<span class=\"comment\">// 读取一行，并写入变量</span></span><br><span class=\"line\">file.<span class=\"built_in\">close</span>();\t\t\t\t\t<span class=\"comment\">// 关闭文件流</span></span><br></pre></td></tr></table></figure>\n\n<p>读取多行：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">string text;</span><br><span class=\"line\"><span class=\"function\">ifstream <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">&quot;test.txt&quot;</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">getline</span>(file, text)) &#123;</span><br><span class=\"line\">    cout &lt;&lt; text &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">file.<span class=\"built_in\">close</span>();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"1-4-文件\"><a href=\"#1-4-文件\" class=\"headerlink\" title=\"1.4. 文件\"></a>1.4. 文件</h1><h1 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h1><p>写入文件：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ofstream <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">&quot;test.txt&quot;</span>)</span></span>;\t\t<span class=\"comment\">// 创建输出流对象</span></span><br><span class=\"line\">file &lt;&lt; <span class=\"string\">&quot;hello&quot;</span>;\t\t\t\t<span class=\"comment\">// 将文本写入文件</span></span><br><span class=\"line\">file.<span class=\"built_in\">close</span>();\t\t\t\t\t<span class=\"comment\">// 关闭文件流</span></span><br></pre></td></tr></table></figure>\n\n<p>读取文件：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">string text;\t\t\t\t\t<span class=\"comment\">// 用于存储读取内容</span></span><br><span class=\"line\"><span class=\"function\">ifstream <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">&quot;test.txt&quot;</span>)</span></span>;\t\t<span class=\"comment\">// 创建输入流对象</span></span><br><span class=\"line\"><span class=\"built_in\">getline</span>(file, text);\t\t\t<span class=\"comment\">// 读取一行，并写入变量</span></span><br><span class=\"line\">file.<span class=\"built_in\">close</span>();\t\t\t\t\t<span class=\"comment\">// 关闭文件流</span></span><br></pre></td></tr></table></figure>\n\n<p>读取多行：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">string text;</span><br><span class=\"line\"><span class=\"function\">ifstream <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">&quot;test.txt&quot;</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">getline</span>(file, text)) &#123;</span><br><span class=\"line\">    cout &lt;&lt; text &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">file.<span class=\"built_in\">close</span>();</span><br></pre></td></tr></table></figure>\n"},{"_content":"# 1.1. 基本语法\n\n# 基本结构\n\n与 C 语言的相同之处：\n\n- 变量、常量定义（宏定义、const）\n- 运算符\n- 分支（if、switch），循环（while、do-while、for）\n- 数组\n- 函数的声明与定义（在C语言基础上，增加了函数重载和默认值等特性）。\n\n```cpp\n#include <iostream>\t\t\t// 引入库文件\nusing namespace std;\t\t// 引入命名空间\n\nint main() {\n\n    cout << \"hello world\" << endl;\t\t// 控制台输出\n\n    return 0;\n}\n```\n\n## 命名空间\n\n**引入命名空间：**\n\n- cout 属于 std 命令空间，引入 std 命名空间后，就可以直接使用 cout 函数。\n\n**不引入命名空间：**\n\n- 使用 std::cout 调用 std 命名空间下的 cout 函数。\n\n```cpp\nstd::cout << \"hello\" << std::endl;\n```\n\n**引入部分成员：**\n\n- 可以减少命名空间的污染。\n\n```cpp\nusing std::cout;\nusing std::endl;\n```\n\n**命名空间的引入位置：**\n\n- 全局引入：在函数外部引入，可以在所有函数内使用。\n- 局部引入：只在当前函数中引入，其他函数不能使用。\n\n## 项目结构\n\n**头文件（.h）：**\n\n- 包含函数的声明和常量的定义，告诉编译器有哪些函数。\n- 引入头文件：`#include \"*.h\"`\n\n**源文件（.c / .cpp）：**负责函数的实现。\n**库文件：**编译后的二进制文件，也包含函数的实现，没有 main 方法，只能被调用。\n**命名空间：**用来解决不同库文件中函数同名的问题。\n\n## 库文件\n\n- cmath：数学相关\n\n# 变量\n\n**修饰符：**\n\n- unsigned：无符号型，置于数据类型之前。。\n- const：常量，置于数据类型之前。\n\n注意：与 C 语言不同，C++ 的局部变量有默认值。不初始化，默认为 0。\n命名规范：变量命名使用小驼峰。\n\n## auto 关键字\n\n作用：\n\n- auto 关键字可以根据赋值，自动推断类型。\n\n注意：\n\n- 使用 auto 必须初始化，不然无法推测类型。\n- auto 变量的类型，在编译时就已经确定，无法再更改类型。\n\n```c\nauto 变量名 = 值;\n```\n\n# 数据类型\n\n> 查看占用空间：`sizeof(数据类型)`、`sizeof(变量)`\n\nC++ 的数据类型：\n![](https://cdn.nlark.com/yuque/0/2023/jpeg/8421281/1685686876703-4db949d7-1008-4fdf-b252-514ebebe64fe.jpeg)\n**关于 long 类型：**\n\n- windows 上占 4 字节。\n- Linux 32 位占 4 字节，Linux 64 位占 8 字节。\n\n**关于布尔型：**\n\n- bool 的值为：true、false。打印结果为：1，0。\n\n**定义字符串：**\n\n- C 语言风格：\n\n```cpp\nchar 数组名[] = \"字符串\";\n```\n\n- C++ 风格：\n\n```cpp\n#include <string>\n\nstring 变量名 = \"字符串\";\n```\n\n## 类型转换\n\n强制类型转换（与 C 语言相同）：\n\n```c\n(数据类型)值\n```\n\nC++ 特性：\n\n```c\nint(值)\n```\n\n数值转字符串：\n\n```cpp\nto_string(值)\n```\n\n字符串转 int：\n\n```cpp\nstoi(str)\n```\n\n# 输入和输出\n\n## 输入\n\ncin 支持传入任意基本类型。\n\n```cpp\ncin >> 变量;\n```\n\n输入给多个变量：\n\n```cpp\ncin >> 变量1 >> 变量2;\n```\n\ncin 的缺点：只能接受一个单词，按空白字符分割。\n使用 getline 可以输入完整的一行：\n\n```c\ngetline(cin, 变量);\n```\n\n## 输出\n\n**cout 的说明：**\n\n- 可以输出任意基本类型。\n- 默认不换行，由 endl 换行。\n- 使用 `<<` 可以拼接字符串，适用不同的类型。\n\n```cpp\ncout << \"hello\" << 250 << endl;\n```\n\n**endl 的作用：**\n\n- 插入换行符并刷新输出流。\n- 刷新输出流：将缓冲区的数据写入输出设备，并将输出缓冲区清空。\n\n转为十六进制输出：`std::hex`\n\n```cpp\ncout << hex << num << endl;\n```\n\n# 循环\n\n## 范围循环\n\n```c\nfor (数据类型 变量 : 容器) {\n    ...\n}\n```\n\n使用 auto 自动推测：\n\n```c\nfor (auto 变量 : 容器) { ... }\n```\n\n循环变量引用：\n\n- 通过引用可以避免对元素进行值拷贝。\n- 通过引用可以在循环中修改元素内容。\n\n```c\nfor (auto &变量 : 容器) { ... }\n```\n\n只读引用：\n\n```c\nfor (const auto &变量 : 容器) { ... }\n```\n\n# \n\n# 函数\n\n注意：和 C 语言一样，函数必须先声明，后使用。或者定义在 main 函数前。\n定义函数的方式同 C 语言。\n\n```c\n返回类型 函数名(参数列表) {\n    ...\n    return 返回值;\n}\n```\n\n函数默认值：\n\n```cpp\n返回类型 函数名(数据类型 形参 = \"值\") { ... }\n```\n\n函数的重载：\n\n- 可以定义多个同名的函数，通过参数列表的不同进行区分，返回类型也可以不同。\n\n```cpp\nvoid hello(string msg) {\n\tcout << msg << endl;\n}\nvoid hello() {\n\tcout << \"hello\" << endl;\n}\n```\n\n# 结构体\n\n与 C 语言不同，C++ 可以使用结构名作为类型，不用加 struct。\n","source":"_posts/C++笔记.md/1. 基础语法/1.1. 基本语法.md","raw":"# 1.1. 基本语法\n\n# 基本结构\n\n与 C 语言的相同之处：\n\n- 变量、常量定义（宏定义、const）\n- 运算符\n- 分支（if、switch），循环（while、do-while、for）\n- 数组\n- 函数的声明与定义（在C语言基础上，增加了函数重载和默认值等特性）。\n\n```cpp\n#include <iostream>\t\t\t// 引入库文件\nusing namespace std;\t\t// 引入命名空间\n\nint main() {\n\n    cout << \"hello world\" << endl;\t\t// 控制台输出\n\n    return 0;\n}\n```\n\n## 命名空间\n\n**引入命名空间：**\n\n- cout 属于 std 命令空间，引入 std 命名空间后，就可以直接使用 cout 函数。\n\n**不引入命名空间：**\n\n- 使用 std::cout 调用 std 命名空间下的 cout 函数。\n\n```cpp\nstd::cout << \"hello\" << std::endl;\n```\n\n**引入部分成员：**\n\n- 可以减少命名空间的污染。\n\n```cpp\nusing std::cout;\nusing std::endl;\n```\n\n**命名空间的引入位置：**\n\n- 全局引入：在函数外部引入，可以在所有函数内使用。\n- 局部引入：只在当前函数中引入，其他函数不能使用。\n\n## 项目结构\n\n**头文件（.h）：**\n\n- 包含函数的声明和常量的定义，告诉编译器有哪些函数。\n- 引入头文件：`#include \"*.h\"`\n\n**源文件（.c / .cpp）：**负责函数的实现。\n**库文件：**编译后的二进制文件，也包含函数的实现，没有 main 方法，只能被调用。\n**命名空间：**用来解决不同库文件中函数同名的问题。\n\n## 库文件\n\n- cmath：数学相关\n\n# 变量\n\n**修饰符：**\n\n- unsigned：无符号型，置于数据类型之前。。\n- const：常量，置于数据类型之前。\n\n注意：与 C 语言不同，C++ 的局部变量有默认值。不初始化，默认为 0。\n命名规范：变量命名使用小驼峰。\n\n## auto 关键字\n\n作用：\n\n- auto 关键字可以根据赋值，自动推断类型。\n\n注意：\n\n- 使用 auto 必须初始化，不然无法推测类型。\n- auto 变量的类型，在编译时就已经确定，无法再更改类型。\n\n```c\nauto 变量名 = 值;\n```\n\n# 数据类型\n\n> 查看占用空间：`sizeof(数据类型)`、`sizeof(变量)`\n\nC++ 的数据类型：\n![](https://cdn.nlark.com/yuque/0/2023/jpeg/8421281/1685686876703-4db949d7-1008-4fdf-b252-514ebebe64fe.jpeg)\n**关于 long 类型：**\n\n- windows 上占 4 字节。\n- Linux 32 位占 4 字节，Linux 64 位占 8 字节。\n\n**关于布尔型：**\n\n- bool 的值为：true、false。打印结果为：1，0。\n\n**定义字符串：**\n\n- C 语言风格：\n\n```cpp\nchar 数组名[] = \"字符串\";\n```\n\n- C++ 风格：\n\n```cpp\n#include <string>\n\nstring 变量名 = \"字符串\";\n```\n\n## 类型转换\n\n强制类型转换（与 C 语言相同）：\n\n```c\n(数据类型)值\n```\n\nC++ 特性：\n\n```c\nint(值)\n```\n\n数值转字符串：\n\n```cpp\nto_string(值)\n```\n\n字符串转 int：\n\n```cpp\nstoi(str)\n```\n\n# 输入和输出\n\n## 输入\n\ncin 支持传入任意基本类型。\n\n```cpp\ncin >> 变量;\n```\n\n输入给多个变量：\n\n```cpp\ncin >> 变量1 >> 变量2;\n```\n\ncin 的缺点：只能接受一个单词，按空白字符分割。\n使用 getline 可以输入完整的一行：\n\n```c\ngetline(cin, 变量);\n```\n\n## 输出\n\n**cout 的说明：**\n\n- 可以输出任意基本类型。\n- 默认不换行，由 endl 换行。\n- 使用 `<<` 可以拼接字符串，适用不同的类型。\n\n```cpp\ncout << \"hello\" << 250 << endl;\n```\n\n**endl 的作用：**\n\n- 插入换行符并刷新输出流。\n- 刷新输出流：将缓冲区的数据写入输出设备，并将输出缓冲区清空。\n\n转为十六进制输出：`std::hex`\n\n```cpp\ncout << hex << num << endl;\n```\n\n# 循环\n\n## 范围循环\n\n```c\nfor (数据类型 变量 : 容器) {\n    ...\n}\n```\n\n使用 auto 自动推测：\n\n```c\nfor (auto 变量 : 容器) { ... }\n```\n\n循环变量引用：\n\n- 通过引用可以避免对元素进行值拷贝。\n- 通过引用可以在循环中修改元素内容。\n\n```c\nfor (auto &变量 : 容器) { ... }\n```\n\n只读引用：\n\n```c\nfor (const auto &变量 : 容器) { ... }\n```\n\n# \n\n# 函数\n\n注意：和 C 语言一样，函数必须先声明，后使用。或者定义在 main 函数前。\n定义函数的方式同 C 语言。\n\n```c\n返回类型 函数名(参数列表) {\n    ...\n    return 返回值;\n}\n```\n\n函数默认值：\n\n```cpp\n返回类型 函数名(数据类型 形参 = \"值\") { ... }\n```\n\n函数的重载：\n\n- 可以定义多个同名的函数，通过参数列表的不同进行区分，返回类型也可以不同。\n\n```cpp\nvoid hello(string msg) {\n\tcout << msg << endl;\n}\nvoid hello() {\n\tcout << \"hello\" << endl;\n}\n```\n\n# 结构体\n\n与 C 语言不同，C++ 可以使用结构名作为类型，不用加 struct。\n","slug":"C++笔记.md/1. 基础语法/1.1. 基本语法","published":1,"date":"2023-10-24T13:25:26.061Z","updated":"2023-10-24T13:25:04.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clo4d0zar00098oracyrjfae7","content":"<h1 id=\"1-1-基本语法\"><a href=\"#1-1-基本语法\" class=\"headerlink\" title=\"1.1. 基本语法\"></a>1.1. 基本语法</h1><h1 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h1><p>与 C 语言的相同之处：</p>\n<ul>\n<li>变量、常量定义（宏定义、const）</li>\n<li>运算符</li>\n<li>分支（if、switch），循环（while、do-while、for）</li>\n<li>数组</li>\n<li>函数的声明与定义（在C语言基础上，增加了函数重载和默认值等特性）。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span>\t\t\t<span class=\"comment\">// 引入库文件</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;\t\t<span class=\"comment\">// 引入命名空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;hello world&quot;</span> &lt;&lt; endl;\t\t<span class=\"comment\">// 控制台输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><p><strong>引入命名空间：</strong></p>\n<ul>\n<li>cout 属于 std 命令空间，引入 std 命名空间后，就可以直接使用 cout 函数。</li>\n</ul>\n<p><strong>不引入命名空间：</strong></p>\n<ul>\n<li>使用 std::cout 调用 std 命名空间下的 cout 函数。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;hello&quot;</span> &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>\n\n<p><strong>引入部分成员：</strong></p>\n<ul>\n<li>可以减少命名空间的污染。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> std::cout;</span><br><span class=\"line\"><span class=\"keyword\">using</span> std::endl;</span><br></pre></td></tr></table></figure>\n\n<p><strong>命名空间的引入位置：</strong></p>\n<ul>\n<li>全局引入：在函数外部引入，可以在所有函数内使用。</li>\n<li>局部引入：只在当前函数中引入，其他函数不能使用。</li>\n</ul>\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><p><strong>头文件（.h）：</strong></p>\n<ul>\n<li>包含函数的声明和常量的定义，告诉编译器有哪些函数。</li>\n<li>引入头文件：<code>#include &quot;*.h&quot;</code></li>\n</ul>\n<p><strong>源文件（.c &#x2F; .cpp）：</strong>负责函数的实现。<br><strong>库文件：</strong>编译后的二进制文件，也包含函数的实现，没有 main 方法，只能被调用。<br><strong>命名空间：</strong>用来解决不同库文件中函数同名的问题。</p>\n<h2 id=\"库文件\"><a href=\"#库文件\" class=\"headerlink\" title=\"库文件\"></a>库文件</h2><ul>\n<li>cmath：数学相关</li>\n</ul>\n<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><p><strong>修饰符：</strong></p>\n<ul>\n<li>unsigned：无符号型，置于数据类型之前。。</li>\n<li>const：常量，置于数据类型之前。</li>\n</ul>\n<p>注意：与 C 语言不同，C++ 的局部变量有默认值。不初始化，默认为 0。<br>命名规范：变量命名使用小驼峰。</p>\n<h2 id=\"auto-关键字\"><a href=\"#auto-关键字\" class=\"headerlink\" title=\"auto 关键字\"></a>auto 关键字</h2><p>作用：</p>\n<ul>\n<li>auto 关键字可以根据赋值，自动推断类型。</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>使用 auto 必须初始化，不然无法推测类型。</li>\n<li>auto 变量的类型，在编译时就已经确定，无法再更改类型。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> 变量名 = 值;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><blockquote>\n<p>查看占用空间：<code>sizeof(数据类型)</code>、<code>sizeof(变量)</code></p>\n</blockquote>\n<p>C++ 的数据类型：<br><img src=\"https://cdn.nlark.com/yuque/0/2023/jpeg/8421281/1685686876703-4db949d7-1008-4fdf-b252-514ebebe64fe.jpeg\"><br><strong>关于 long 类型：</strong></p>\n<ul>\n<li>windows 上占 4 字节。</li>\n<li>Linux 32 位占 4 字节，Linux 64 位占 8 字节。</li>\n</ul>\n<p><strong>关于布尔型：</strong></p>\n<ul>\n<li>bool 的值为：true、false。打印结果为：1，0。</li>\n</ul>\n<p><strong>定义字符串：</strong></p>\n<ul>\n<li>C 语言风格：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> 数组名[] = <span class=\"string\">&quot;字符串&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>C++ 风格：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">string 变量名 = <span class=\"string\">&quot;字符串&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><p>强制类型转换（与 C 语言相同）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(数据类型)值</span><br></pre></td></tr></table></figure>\n\n<p>C++ 特性：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>(值)</span><br></pre></td></tr></table></figure>\n\n<p>数值转字符串：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">to_string</span>(值)</span><br></pre></td></tr></table></figure>\n\n<p>字符串转 int：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stoi</span>(str)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"输入和输出\"><a href=\"#输入和输出\" class=\"headerlink\" title=\"输入和输出\"></a>输入和输出</h1><h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p>cin 支持传入任意基本类型。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cin &gt;&gt; 变量;</span><br></pre></td></tr></table></figure>\n\n<p>输入给多个变量：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cin &gt;&gt; 变量<span class=\"number\">1</span> &gt;&gt; 变量<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>cin 的缺点：只能接受一个单词，按空白字符分割。<br>使用 getline 可以输入完整的一行：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getline(<span class=\"built_in\">cin</span>, 变量);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p><strong>cout 的说明：</strong></p>\n<ul>\n<li>可以输出任意基本类型。</li>\n<li>默认不换行，由 endl 换行。</li>\n<li>使用 <code>&lt;&lt;</code> 可以拼接字符串，适用不同的类型。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;hello&quot;</span> &lt;&lt; <span class=\"number\">250</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<p><strong>endl 的作用：</strong></p>\n<ul>\n<li>插入换行符并刷新输出流。</li>\n<li>刷新输出流：将缓冲区的数据写入输出设备，并将输出缓冲区清空。</li>\n</ul>\n<p>转为十六进制输出：<code>std::hex</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cout &lt;&lt; hex &lt;&lt; num &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h1><h2 id=\"范围循环\"><a href=\"#范围循环\" class=\"headerlink\" title=\"范围循环\"></a>范围循环</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (数据类型 变量 : 容器) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 auto 自动推测：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> 变量 : 容器) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>循环变量引用：</p>\n<ul>\n<li>通过引用可以避免对元素进行值拷贝。</li>\n<li>通过引用可以在循环中修改元素内容。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;变量 : 容器) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>只读引用：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;变量 : 容器) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>注意：和 C 语言一样，函数必须先声明，后使用。或者定义在 main 函数前。<br>定义函数的方式同 C 语言。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">返回类型 函数名(参数列表) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> 返回值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数默认值：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">返回类型 函数名(数据类型 形参 = <span class=\"string\">&quot;值&quot;</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数的重载：</p>\n<ul>\n<li>可以定义多个同名的函数，通过参数列表的不同进行区分，返回类型也可以不同。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">hello</span><span class=\"params\">(string msg)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; msg &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;hello&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h1><p>与 C 语言不同，C++ 可以使用结构名作为类型，不用加 struct。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"1-1-基本语法\"><a href=\"#1-1-基本语法\" class=\"headerlink\" title=\"1.1. 基本语法\"></a>1.1. 基本语法</h1><h1 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h1><p>与 C 语言的相同之处：</p>\n<ul>\n<li>变量、常量定义（宏定义、const）</li>\n<li>运算符</li>\n<li>分支（if、switch），循环（while、do-while、for）</li>\n<li>数组</li>\n<li>函数的声明与定义（在C语言基础上，增加了函数重载和默认值等特性）。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span>\t\t\t<span class=\"comment\">// 引入库文件</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;\t\t<span class=\"comment\">// 引入命名空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;hello world&quot;</span> &lt;&lt; endl;\t\t<span class=\"comment\">// 控制台输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><p><strong>引入命名空间：</strong></p>\n<ul>\n<li>cout 属于 std 命令空间，引入 std 命名空间后，就可以直接使用 cout 函数。</li>\n</ul>\n<p><strong>不引入命名空间：</strong></p>\n<ul>\n<li>使用 std::cout 调用 std 命名空间下的 cout 函数。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;hello&quot;</span> &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>\n\n<p><strong>引入部分成员：</strong></p>\n<ul>\n<li>可以减少命名空间的污染。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> std::cout;</span><br><span class=\"line\"><span class=\"keyword\">using</span> std::endl;</span><br></pre></td></tr></table></figure>\n\n<p><strong>命名空间的引入位置：</strong></p>\n<ul>\n<li>全局引入：在函数外部引入，可以在所有函数内使用。</li>\n<li>局部引入：只在当前函数中引入，其他函数不能使用。</li>\n</ul>\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><p><strong>头文件（.h）：</strong></p>\n<ul>\n<li>包含函数的声明和常量的定义，告诉编译器有哪些函数。</li>\n<li>引入头文件：<code>#include &quot;*.h&quot;</code></li>\n</ul>\n<p><strong>源文件（.c &#x2F; .cpp）：</strong>负责函数的实现。<br><strong>库文件：</strong>编译后的二进制文件，也包含函数的实现，没有 main 方法，只能被调用。<br><strong>命名空间：</strong>用来解决不同库文件中函数同名的问题。</p>\n<h2 id=\"库文件\"><a href=\"#库文件\" class=\"headerlink\" title=\"库文件\"></a>库文件</h2><ul>\n<li>cmath：数学相关</li>\n</ul>\n<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><p><strong>修饰符：</strong></p>\n<ul>\n<li>unsigned：无符号型，置于数据类型之前。。</li>\n<li>const：常量，置于数据类型之前。</li>\n</ul>\n<p>注意：与 C 语言不同，C++ 的局部变量有默认值。不初始化，默认为 0。<br>命名规范：变量命名使用小驼峰。</p>\n<h2 id=\"auto-关键字\"><a href=\"#auto-关键字\" class=\"headerlink\" title=\"auto 关键字\"></a>auto 关键字</h2><p>作用：</p>\n<ul>\n<li>auto 关键字可以根据赋值，自动推断类型。</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>使用 auto 必须初始化，不然无法推测类型。</li>\n<li>auto 变量的类型，在编译时就已经确定，无法再更改类型。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> 变量名 = 值;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><blockquote>\n<p>查看占用空间：<code>sizeof(数据类型)</code>、<code>sizeof(变量)</code></p>\n</blockquote>\n<p>C++ 的数据类型：<br><img src=\"https://cdn.nlark.com/yuque/0/2023/jpeg/8421281/1685686876703-4db949d7-1008-4fdf-b252-514ebebe64fe.jpeg\"><br><strong>关于 long 类型：</strong></p>\n<ul>\n<li>windows 上占 4 字节。</li>\n<li>Linux 32 位占 4 字节，Linux 64 位占 8 字节。</li>\n</ul>\n<p><strong>关于布尔型：</strong></p>\n<ul>\n<li>bool 的值为：true、false。打印结果为：1，0。</li>\n</ul>\n<p><strong>定义字符串：</strong></p>\n<ul>\n<li>C 语言风格：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> 数组名[] = <span class=\"string\">&quot;字符串&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>C++ 风格：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">string 变量名 = <span class=\"string\">&quot;字符串&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><p>强制类型转换（与 C 语言相同）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(数据类型)值</span><br></pre></td></tr></table></figure>\n\n<p>C++ 特性：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>(值)</span><br></pre></td></tr></table></figure>\n\n<p>数值转字符串：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">to_string</span>(值)</span><br></pre></td></tr></table></figure>\n\n<p>字符串转 int：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stoi</span>(str)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"输入和输出\"><a href=\"#输入和输出\" class=\"headerlink\" title=\"输入和输出\"></a>输入和输出</h1><h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p>cin 支持传入任意基本类型。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cin &gt;&gt; 变量;</span><br></pre></td></tr></table></figure>\n\n<p>输入给多个变量：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cin &gt;&gt; 变量<span class=\"number\">1</span> &gt;&gt; 变量<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>cin 的缺点：只能接受一个单词，按空白字符分割。<br>使用 getline 可以输入完整的一行：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getline(<span class=\"built_in\">cin</span>, 变量);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p><strong>cout 的说明：</strong></p>\n<ul>\n<li>可以输出任意基本类型。</li>\n<li>默认不换行，由 endl 换行。</li>\n<li>使用 <code>&lt;&lt;</code> 可以拼接字符串，适用不同的类型。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;hello&quot;</span> &lt;&lt; <span class=\"number\">250</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<p><strong>endl 的作用：</strong></p>\n<ul>\n<li>插入换行符并刷新输出流。</li>\n<li>刷新输出流：将缓冲区的数据写入输出设备，并将输出缓冲区清空。</li>\n</ul>\n<p>转为十六进制输出：<code>std::hex</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cout &lt;&lt; hex &lt;&lt; num &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h1><h2 id=\"范围循环\"><a href=\"#范围循环\" class=\"headerlink\" title=\"范围循环\"></a>范围循环</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (数据类型 变量 : 容器) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 auto 自动推测：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> 变量 : 容器) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>循环变量引用：</p>\n<ul>\n<li>通过引用可以避免对元素进行值拷贝。</li>\n<li>通过引用可以在循环中修改元素内容。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;变量 : 容器) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>只读引用：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;变量 : 容器) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>注意：和 C 语言一样，函数必须先声明，后使用。或者定义在 main 函数前。<br>定义函数的方式同 C 语言。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">返回类型 函数名(参数列表) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> 返回值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数默认值：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">返回类型 函数名(数据类型 形参 = <span class=\"string\">&quot;值&quot;</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数的重载：</p>\n<ul>\n<li>可以定义多个同名的函数，通过参数列表的不同进行区分，返回类型也可以不同。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">hello</span><span class=\"params\">(string msg)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; msg &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;hello&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h1><p>与 C 语言不同，C++ 可以使用结构名作为类型，不用加 struct。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}